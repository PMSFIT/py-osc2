# Generated from openscenario2.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3t")
        buf.write("\u056d\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\3\2\7\2\u012a")
        buf.write("\n\2\f\2\16\2\u012d\13\2\3\2\7\2\u0130\n\2\f\2\16\2\u0133")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\5\5\u013f")
        buf.write("\n\5\3\6\3\6\3\6\7\6\u0144\n\6\f\6\16\6\u0147\13\6\3\6")
        buf.write("\3\6\3\7\3\7\3\7\5\7\u014e\n\7\3\b\3\b\3\b\3\b\5\b\u0154")
        buf.write("\n\b\3\b\3\b\3\t\3\t\3\t\7\t\u015b\n\t\f\t\16\t\u015e")
        buf.write("\13\t\3\n\3\n\5\n\u0162\n\n\3\13\3\13\3\f\3\f\3\f\3\f")
        buf.write("\7\f\u016a\n\f\f\f\16\f\u016d\13\f\3\f\3\f\3\r\3\r\5\r")
        buf.write("\u0173\n\r\3\16\5\16\u0176\n\16\3\16\5\16\u0179\n\16\3")
        buf.write("\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\5\17\u0187\n\17\3\20\3\20\5\20\u018b\n\20\3\21\3")
        buf.write("\21\5\21\u018f\n\21\3\22\3\22\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\24\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\33\3\33\3\33\7\33\u01b5\n\33\f")
        buf.write("\33\16\33\u01b8\13\33\3\34\3\34\3\34\3\34\3\35\3\35\3")
        buf.write("\35\3\35\3\35\5\35\u01c3\n\35\3\35\3\35\5\35\u01c7\n\35")
        buf.write("\3\35\3\35\3\36\3\36\3\36\3\36\5\36\u01cf\n\36\3\37\3")
        buf.write("\37\3\37\3\37\5\37\u01d5\n\37\3 \3 \3!\3!\3!\3!\3!\3!")
        buf.write("\3!\7!\u01e0\n!\f!\16!\u01e3\13!\3!\3!\3!\3\"\3\"\3\"")
        buf.write("\5\"\u01eb\n\"\3#\3#\3$\3$\3%\3%\5%\u01f3\n%\3&\3&\3&")
        buf.write("\5&\u01f8\n&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\5\'\u0205\n\'\3\'\3\'\5\'\u0209\n\'\5\'\u020b\n\'\3\'")
        buf.write("\3\'\3\'\6\'\u0210\n\'\r\'\16\'\u0211\3\'\3\'\3\'\5\'")
        buf.write("\u0217\n\'\3(\3(\3(\3(\3(\5(\u021e\n(\3)\3)\3*\3*\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\5+\u022d\n+\3+\3+\5+\u0231\n+\5")
        buf.write("+\u0233\n+\3+\3+\3+\6+\u0238\n+\r+\16+\u0239\3+\3+\3+")
        buf.write("\5+\u023f\n+\3,\3,\3,\3,\3,\5,\u0246\n,\3-\3-\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\5.\u0253\n.\3.\3.\5.\u0257\n.\5.\u0259")
        buf.write("\n.\3.\3.\3.\3.\6.\u025f\n.\r.\16.\u0260\3.\3.\3.\5.\u0266")
        buf.write("\n.\3/\3/\3/\3/\3/\3/\5/\u026e\n/\3\60\3\60\3\60\5\60")
        buf.write("\u0273\n\60\3\60\3\60\3\61\3\61\3\62\3\62\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\5\62\u0282\n\62\3\62\3\62\5\62")
        buf.write("\u0286\n\62\5\62\u0288\n\62\3\62\3\62\3\62\3\62\6\62\u028e")
        buf.write("\n\62\r\62\16\62\u028f\3\62\3\62\3\62\5\62\u0295\n\62")
        buf.write("\3\63\3\63\3\63\3\63\5\63\u029b\n\63\3\63\3\63\3\63\5")
        buf.write("\63\u02a0\n\63\3\63\3\63\3\63\3\63\6\63\u02a6\n\63\r\63")
        buf.write("\16\63\u02a7\3\63\3\63\3\63\5\63\u02ad\n\63\3\64\3\64")
        buf.write("\3\65\3\65\3\65\3\66\3\66\5\66\u02b6\n\66\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\7\67\u02bf\n\67\f\67\16\67\u02c2")
        buf.write("\13\67\3\67\3\67\3\67\38\38\38\38\38\68\u02cc\n8\r8\16")
        buf.write("8\u02cd\38\38\39\39\39\59\u02d5\n9\3:\3:\3:\3:\5:\u02db")
        buf.write("\n:\3;\3;\3;\3;\3;\3;\5;\u02e3\n;\3;\3;\5;\u02e7\n;\3")
        buf.write(";\3;\3<\3<\5<\u02ed\n<\3<\3<\5<\u02f1\n<\3<\5<\u02f4\n")
        buf.write("<\3=\3=\3=\3>\3>\3>\3?\3?\3@\3@\3A\3A\3A\5A\u0303\nA\3")
        buf.write("A\3A\3B\3B\3B\3B\3B\5B\u030c\nB\3C\3C\3C\3C\3C\3D\3D\3")
        buf.write("D\3D\3D\3E\3E\3E\3E\3E\3F\3F\3F\3F\3F\3F\3F\5F\u0324\n")
        buf.write("F\3F\3F\3G\3G\3H\3H\3I\3I\5I\u032e\nI\3J\3J\3J\7J\u0333")
        buf.write("\nJ\fJ\16J\u0336\13J\3J\3J\3J\3J\5J\u033c\nJ\3J\3J\5J")
        buf.write("\u0340\nJ\3K\3K\3K\3K\7K\u0346\nK\fK\16K\u0349\13K\3K")
        buf.write("\3K\3K\3K\3K\5K\u0350\nK\5K\u0352\nK\3K\3K\3L\3L\3L\3")
        buf.write("L\3L\3L\3L\5L\u035d\nL\3L\3L\3M\3M\3N\3N\3N\3N\6N\u0367")
        buf.write("\nN\rN\16N\u0368\3N\3N\3O\3O\3P\3P\5P\u0371\nP\3Q\3Q\3")
        buf.write("Q\5Q\u0376\nQ\3Q\3Q\3Q\3Q\3R\3R\3S\3S\3T\3T\3T\3T\3T\3")
        buf.write("T\3U\3U\5U\u0388\nU\3V\3V\3V\3V\5V\u038e\nV\3V\3V\3V\5")
        buf.write("V\u0393\nV\3V\3V\3V\3W\3W\3X\3X\5X\u039c\nX\3X\3X\3X\3")
        buf.write("X\3X\3X\3X\5X\u03a5\nX\3X\3X\5X\u03a9\nX\3Y\3Y\3Z\3Z\3")
        buf.write("[\3[\3[\3[\3[\3[\3\\\3\\\3\\\5\\\u03b8\n\\\3\\\3\\\3\\")
        buf.write("\5\\\u03bd\n\\\3\\\3\\\3\\\3]\3]\5]\u03c4\n]\3^\3^\3^")
        buf.write("\3^\3^\6^\u03cb\n^\r^\16^\u03cc\3^\3^\3_\3_\5_\u03d3\n")
        buf.write("_\3`\3`\3`\3a\3a\3a\5a\u03db\na\3a\3a\3a\3a\3a\5a\u03e2")
        buf.write("\na\3b\3b\3c\3c\3c\5c\u03e9\nc\3c\5c\u03ec\nc\3c\3c\3")
        buf.write("c\6c\u03f1\nc\rc\16c\u03f2\3c\3c\5c\u03f7\nc\3d\3d\3e")
        buf.write("\3e\3e\5e\u03fe\ne\3e\3e\3e\5e\u0403\ne\3e\3e\3e\5e\u0408")
        buf.write("\ne\3f\3f\3f\3f\6f\u040e\nf\rf\16f\u040f\3f\3f\3g\3g\3")
        buf.write("g\5g\u0417\ng\3h\3h\3i\3i\3i\3i\3j\3j\3j\3j\3j\3j\5j\u0425")
        buf.write("\nj\3j\3j\3k\3k\3k\3k\3l\3l\3l\5l\u0430\nl\3l\3l\3m\3")
        buf.write("m\3m\3m\3n\3n\3n\7n\u043b\nn\fn\16n\u043e\13n\3o\3o\3")
        buf.write("o\3o\3o\5o\u0445\no\3p\3p\3q\3q\3q\7q\u044c\nq\fq\16q")
        buf.write("\u044f\13q\3q\3q\7q\u0453\nq\fq\16q\u0456\13q\3q\3q\3")
        buf.write("q\7q\u045b\nq\fq\16q\u045e\13q\5q\u0460\nq\3r\3r\3s\3")
        buf.write("s\3s\3s\3t\3t\3t\7t\u046b\nt\ft\16t\u046e\13t\3t\3t\7")
        buf.write("t\u0472\nt\ft\16t\u0475\13t\3t\3t\3t\7t\u047a\nt\ft\16")
        buf.write("t\u047d\13t\5t\u047f\nt\3u\3u\3v\3v\3v\3v\3w\3w\5w\u0489")
        buf.write("\nw\3x\3x\3x\3x\3x\3x\3y\3y\3y\7y\u0494\ny\fy\16y\u0497")
        buf.write("\13y\3z\3z\3z\7z\u049c\nz\fz\16z\u049f\13z\3{\3{\3{\7")
        buf.write("{\u04a4\n{\f{\16{\u04a7\13{\3|\3|\3|\5|\u04ac\n|\3}\3")
        buf.write("}\3}\3}\3}\3}\3}\7}\u04b5\n}\f}\16}\u04b8\13}\3~\3~\3")
        buf.write("\177\3\177\3\177\3\177\3\177\3\177\3\177\7\177\u04c3\n")
        buf.write("\177\f\177\16\177\u04c6\13\177\3\u0080\3\u0080\3\u0081")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\7\u0081")
        buf.write("\u04d1\n\u0081\f\u0081\16\u0081\u04d4\13\u0081\3\u0082")
        buf.write("\3\u0082\3\u0083\3\u0083\3\u0083\5\u0083\u04db\n\u0083")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\5\u0084\u04f6\n\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0084\7\u0084\u04fc\n\u0084")
        buf.write("\f\u0084\16\u0084\u04ff\13\u0084\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u050c\n\u0086\3\u0087\3\u0087\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0516")
        buf.write("\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u051c")
        buf.write("\n\u0088\f\u0088\16\u0088\u051f\13\u0088\3\u0088\3\u0088")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089\5\u0089")
        buf.write("\u0530\n\u0089\3\u008a\3\u008a\3\u008b\3\u008b\3\u008c")
        buf.write("\3\u008c\3\u008d\3\u008d\3\u008e\3\u008e\3\u008f\3\u008f")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u0557\n\u0090")
        buf.write("\3\u0091\3\u0091\5\u0091\u055b\n\u0091\3\u0092\5\u0092")
        buf.write("\u055e\n\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093")
        buf.write("\3\u0094\3\u0094\5\u0094\u0567\n\u0094\3\u0094\3\u0094")
        buf.write("\5\u0094\u056b\n\u0094\3\u0094\2\6\u00f8\u00fc\u0100\u0106")
        buf.write("\u0095\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,")
        buf.write(".\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080")
        buf.write("\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092")
        buf.write("\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4")
        buf.write("\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6")
        buf.write("\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8")
        buf.write("\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da")
        buf.write("\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec")
        buf.write("\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe")
        buf.write("\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110")
        buf.write("\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122")
        buf.write("\u0124\u0126\2\n\3\2\16\22\3\2\34#\3\2<=\3\2EF\3\2IK\4")
        buf.write("\2))UZ\3\2[\\\4\2\13\13]^\2\u059f\2\u012b\3\2\2\2\4\u0136")
        buf.write("\3\2\2\2\6\u0138\3\2\2\2\b\u013e\3\2\2\2\n\u0145\3\2\2")
        buf.write("\2\f\u014d\3\2\2\2\16\u014f\3\2\2\2\20\u0157\3\2\2\2\22")
        buf.write("\u0161\3\2\2\2\24\u0163\3\2\2\2\26\u0165\3\2\2\2\30\u0172")
        buf.write("\3\2\2\2\32\u0178\3\2\2\2\34\u0186\3\2\2\2\36\u018a\3")
        buf.write("\2\2\2 \u018e\3\2\2\2\"\u0190\3\2\2\2$\u0192\3\2\2\2&")
        buf.write("\u0194\3\2\2\2(\u0198\3\2\2\2*\u019a\3\2\2\2,\u01a0\3")
        buf.write("\2\2\2.\u01a8\3\2\2\2\60\u01aa\3\2\2\2\62\u01ac\3\2\2")
        buf.write("\2\64\u01b1\3\2\2\2\66\u01b9\3\2\2\28\u01bd\3\2\2\2:\u01ca")
        buf.write("\3\2\2\2<\u01d0\3\2\2\2>\u01d6\3\2\2\2@\u01d8\3\2\2\2")
        buf.write("B\u01e7\3\2\2\2D\u01ec\3\2\2\2F\u01ee\3\2\2\2H\u01f2\3")
        buf.write("\2\2\2J\u01f7\3\2\2\2L\u01fb\3\2\2\2N\u021d\3\2\2\2P\u021f")
        buf.write("\3\2\2\2R\u0221\3\2\2\2T\u0223\3\2\2\2V\u0245\3\2\2\2")
        buf.write("X\u0247\3\2\2\2Z\u0249\3\2\2\2\\\u026d\3\2\2\2^\u0272")
        buf.write("\3\2\2\2`\u0276\3\2\2\2b\u0278\3\2\2\2d\u0296\3\2\2\2")
        buf.write("f\u02ae\3\2\2\2h\u02b0\3\2\2\2j\u02b5\3\2\2\2l\u02b7\3")
        buf.write("\2\2\2n\u02c6\3\2\2\2p\u02d4\3\2\2\2r\u02da\3\2\2\2t\u02dc")
        buf.write("\3\2\2\2v\u02f3\3\2\2\2x\u02f5\3\2\2\2z\u02f8\3\2\2\2")
        buf.write("|\u02fb\3\2\2\2~\u02fd\3\2\2\2\u0080\u0302\3\2\2\2\u0082")
        buf.write("\u030b\3\2\2\2\u0084\u030d\3\2\2\2\u0086\u0312\3\2\2\2")
        buf.write("\u0088\u0317\3\2\2\2\u008a\u031c\3\2\2\2\u008c\u0327\3")
        buf.write("\2\2\2\u008e\u0329\3\2\2\2\u0090\u032d\3\2\2\2\u0092\u032f")
        buf.write("\3\2\2\2\u0094\u0341\3\2\2\2\u0096\u0355\3\2\2\2\u0098")
        buf.write("\u0360\3\2\2\2\u009a\u0362\3\2\2\2\u009c\u036c\3\2\2\2")
        buf.write("\u009e\u0370\3\2\2\2\u00a0\u0372\3\2\2\2\u00a2\u037b\3")
        buf.write("\2\2\2\u00a4\u037d\3\2\2\2\u00a6\u037f\3\2\2\2\u00a8\u0387")
        buf.write("\3\2\2\2\u00aa\u0389\3\2\2\2\u00ac\u0397\3\2\2\2\u00ae")
        buf.write("\u0399\3\2\2\2\u00b0\u03aa\3\2\2\2\u00b2\u03ac\3\2\2\2")
        buf.write("\u00b4\u03ae\3\2\2\2\u00b6\u03b7\3\2\2\2\u00b8\u03c3\3")
        buf.write("\2\2\2\u00ba\u03c5\3\2\2\2\u00bc\u03d2\3\2\2\2\u00be\u03d4")
        buf.write("\3\2\2\2\u00c0\u03da\3\2\2\2\u00c2\u03e3\3\2\2\2\u00c4")
        buf.write("\u03e5\3\2\2\2\u00c6\u03f8\3\2\2\2\u00c8\u03fd\3\2\2\2")
        buf.write("\u00ca\u0409\3\2\2\2\u00cc\u0416\3\2\2\2\u00ce\u0418\3")
        buf.write("\2\2\2\u00d0\u041a\3\2\2\2\u00d2\u041e\3\2\2\2\u00d4\u0428")
        buf.write("\3\2\2\2\u00d6\u042c\3\2\2\2\u00d8\u0433\3\2\2\2\u00da")
        buf.write("\u0437\3\2\2\2\u00dc\u043f\3\2\2\2\u00de\u0446\3\2\2\2")
        buf.write("\u00e0\u045f\3\2\2\2\u00e2\u0461\3\2\2\2\u00e4\u0463\3")
        buf.write("\2\2\2\u00e6\u047e\3\2\2\2\u00e8\u0480\3\2\2\2\u00ea\u0482")
        buf.write("\3\2\2\2\u00ec\u0488\3\2\2\2\u00ee\u048a\3\2\2\2\u00f0")
        buf.write("\u0490\3\2\2\2\u00f2\u0498\3\2\2\2\u00f4\u04a0\3\2\2\2")
        buf.write("\u00f6\u04ab\3\2\2\2\u00f8\u04ad\3\2\2\2\u00fa\u04b9\3")
        buf.write("\2\2\2\u00fc\u04bb\3\2\2\2\u00fe\u04c7\3\2\2\2\u0100\u04c9")
        buf.write("\3\2\2\2\u0102\u04d5\3\2\2\2\u0104\u04da\3\2\2\2\u0106")
        buf.write("\u04dc\3\2\2\2\u0108\u0500\3\2\2\2\u010a\u050b\3\2\2\2")
        buf.write("\u010c\u0515\3\2\2\2\u010e\u0517\3\2\2\2\u0110\u052f\3")
        buf.write("\2\2\2\u0112\u0531\3\2\2\2\u0114\u0533\3\2\2\2\u0116\u0535")
        buf.write("\3\2\2\2\u0118\u0537\3\2\2\2\u011a\u0539\3\2\2\2\u011c")
        buf.write("\u053b\3\2\2\2\u011e\u0556\3\2\2\2\u0120\u055a\3\2\2\2")
        buf.write("\u0122\u055d\3\2\2\2\u0124\u0562\3\2\2\2\u0126\u0566\3")
        buf.write("\2\2\2\u0128\u012a\5\4\3\2\u0129\u0128\3\2\2\2\u012a\u012d")
        buf.write("\3\2\2\2\u012b\u0129\3\2\2\2\u012b\u012c\3\2\2\2\u012c")
        buf.write("\u0131\3\2\2\2\u012d\u012b\3\2\2\2\u012e\u0130\5\f\7\2")
        buf.write("\u012f\u012e\3\2\2\2\u0130\u0133\3\2\2\2\u0131\u012f\3")
        buf.write("\2\2\2\u0131\u0132\3\2\2\2\u0132\u0134\3\2\2\2\u0133\u0131")
        buf.write("\3\2\2\2\u0134\u0135\7\2\2\3\u0135\3\3\2\2\2\u0136\u0137")
        buf.write("\5\6\4\2\u0137\5\3\2\2\2\u0138\u0139\7\3\2\2\u0139\u013a")
        buf.write("\5\b\5\2\u013a\u013b\7p\2\2\u013b\7\3\2\2\2\u013c\u013f")
        buf.write("\5\u0112\u008a\2\u013d\u013f\5\n\6\2\u013e\u013c\3\2\2")
        buf.write("\2\u013e\u013d\3\2\2\2\u013f\t\3\2\2\2\u0140\u0141\5\u011e")
        buf.write("\u0090\2\u0141\u0142\7\4\2\2\u0142\u0144\3\2\2\2\u0143")
        buf.write("\u0140\3\2\2\2\u0144\u0147\3\2\2\2\u0145\u0143\3\2\2\2")
        buf.write("\u0145\u0146\3\2\2\2\u0146\u0148\3\2\2\2\u0147\u0145\3")
        buf.write("\2\2\2\u0148\u0149\5\u011e\u0090\2\u0149\13\3\2\2\2\u014a")
        buf.write("\u014e\5\16\b\2\u014b\u014e\5\26\f\2\u014c\u014e\5\34")
        buf.write("\17\2\u014d\u014a\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014c")
        buf.write("\3\2\2\2\u014e\r\3\2\2\2\u014f\u0150\7\5\2\2\u0150\u0153")
        buf.write("\5\22\n\2\u0151\u0152\7\6\2\2\u0152\u0154\5\20\t\2\u0153")
        buf.write("\u0151\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\3\2\2\2")
        buf.write("\u0155\u0156\7p\2\2\u0156\17\3\2\2\2\u0157\u015c\5\22")
        buf.write("\n\2\u0158\u0159\7\7\2\2\u0159\u015b\5\22\n\2\u015a\u0158")
        buf.write("\3\2\2\2\u015b\u015e\3\2\2\2\u015c\u015a\3\2\2\2\u015c")
        buf.write("\u015d\3\2\2\2\u015d\21\3\2\2\2\u015e\u015c\3\2\2\2\u015f")
        buf.write("\u0162\5\u011e\u0090\2\u0160\u0162\5\24\13\2\u0161\u015f")
        buf.write("\3\2\2\2\u0161\u0160\3\2\2\2\u0162\23\3\2\2\2\u0163\u0164")
        buf.write("\7\b\2\2\u0164\25\3\2\2\2\u0165\u0166\7\t\2\2\u0166\u016b")
        buf.write("\5\30\r\2\u0167\u0168\7\7\2\2\u0168\u016a\5\30\r\2\u0169")
        buf.write("\u0167\3\2\2\2\u016a\u016d\3\2\2\2\u016b\u0169\3\2\2\2")
        buf.write("\u016b\u016c\3\2\2\2\u016c\u016e\3\2\2\2\u016d\u016b\3")
        buf.write("\2\2\2\u016e\u016f\7p\2\2\u016f\27\3\2\2\2\u0170\u0173")
        buf.write("\5\u0120\u0091\2\u0171\u0173\5\32\16\2\u0172\u0170\3\2")
        buf.write("\2\2\u0172\u0171\3\2\2\2\u0173\31\3\2\2\2\u0174\u0176")
        buf.write("\5\22\n\2\u0175\u0174\3\2\2\2\u0175\u0176\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\u0179\7\n\2\2\u0178\u0175\3\2\2\2")
        buf.write("\u0178\u0179\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017b\7")
        buf.write("\13\2\2\u017b\33\3\2\2\2\u017c\u0187\5*\26\2\u017d\u0187")
        buf.write("\5,\27\2\u017e\u0187\5@!\2\u017f\u0187\5L\'\2\u0180\u0187")
        buf.write("\5T+\2\u0181\u0187\5b\62\2\u0182\u0187\5Z.\2\u0183\u0187")
        buf.write("\5d\63\2\u0184\u0187\5j\66\2\u0185\u0187\5h\65\2\u0186")
        buf.write("\u017c\3\2\2\2\u0186\u017d\3\2\2\2\u0186\u017e\3\2\2\2")
        buf.write("\u0186\u017f\3\2\2\2\u0186\u0180\3\2\2\2\u0186\u0181\3")
        buf.write("\2\2\2\u0186\u0182\3\2\2\2\u0186\u0183\3\2\2\2\u0186\u0184")
        buf.write("\3\2\2\2\u0186\u0185\3\2\2\2\u0187\35\3\2\2\2\u0188\u018b")
        buf.write("\5 \21\2\u0189\u018b\5$\23\2\u018a\u0188\3\2\2\2\u018a")
        buf.write("\u0189\3\2\2\2\u018b\37\3\2\2\2\u018c\u018f\5(\25\2\u018d")
        buf.write("\u018f\5\"\22\2\u018e\u018c\3\2\2\2\u018e\u018d\3\2\2")
        buf.write("\2\u018f!\3\2\2\2\u0190\u0191\5\u0120\u0091\2\u0191#\3")
        buf.write("\2\2\2\u0192\u0193\5&\24\2\u0193%\3\2\2\2\u0194\u0195")
        buf.write("\7\f\2\2\u0195\u0196\7\r\2\2\u0196\u0197\5 \21\2\u0197")
        buf.write("\'\3\2\2\2\u0198\u0199\t\2\2\2\u0199)\3\2\2\2\u019a\u019b")
        buf.write("\7\23\2\2\u019b\u019c\5\"\22\2\u019c\u019d\7\24\2\2\u019d")
        buf.write("\u019e\5.\30\2\u019e\u019f\7p\2\2\u019f+\3\2\2\2\u01a0")
        buf.write("\u01a1\7\25\2\2\u01a1\u01a2\5\u0126\u0094\2\u01a2\u01a3")
        buf.write("\7\r\2\2\u01a3\u01a4\5\"\22\2\u01a4\u01a5\7\24\2\2\u01a5")
        buf.write("\u01a6\5\60\31\2\u01a6\u01a7\7p\2\2\u01a7-\3\2\2\2\u01a8")
        buf.write("\u01a9\5\62\32\2\u01a9/\3\2\2\2\u01aa\u01ab\58\35\2\u01ab")
        buf.write("\61\3\2\2\2\u01ac\u01ad\7\26\2\2\u01ad\u01ae\7\27\2\2")
        buf.write("\u01ae\u01af\5\64\33\2\u01af\u01b0\7\30\2\2\u01b0\63\3")
        buf.write("\2\2\2\u01b1\u01b6\5\66\34\2\u01b2\u01b3\7\7\2\2\u01b3")
        buf.write("\u01b5\5\66\34\2\u01b4\u01b2\3\2\2\2\u01b5\u01b8\3\2\2")
        buf.write("\2\u01b6\u01b4\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b7\65\3")
        buf.write("\2\2\2\u01b8\u01b6\3\2\2\2\u01b9\u01ba\5> \2\u01ba\u01bb")
        buf.write("\7\31\2\2\u01bb\u01bc\5\u0116\u008c\2\u01bc\67\3\2\2\2")
        buf.write("\u01bd\u01be\7\26\2\2\u01be\u01bf\7\27\2\2\u01bf\u01c2")
        buf.write("\5\64\33\2\u01c0\u01c1\7\7\2\2\u01c1\u01c3\5:\36\2\u01c2")
        buf.write("\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01c6\3\2\2\2")
        buf.write("\u01c4\u01c5\7\7\2\2\u01c5\u01c7\5<\37\2\u01c6\u01c4\3")
        buf.write("\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9")
        buf.write("\7\30\2\2\u01c99\3\2\2\2\u01ca\u01cb\7\32\2\2\u01cb\u01ce")
        buf.write("\7\31\2\2\u01cc\u01cf\5\u011c\u008f\2\u01cd\u01cf\5\u0116")
        buf.write("\u008c\2\u01ce\u01cc\3\2\2\2\u01ce\u01cd\3\2\2\2\u01cf")
        buf.write(";\3\2\2\2\u01d0\u01d1\7\33\2\2\u01d1\u01d4\7\31\2\2\u01d2")
        buf.write("\u01d5\5\u011c\u008f\2\u01d3\u01d5\5\u0116\u008c\2\u01d4")
        buf.write("\u01d2\3\2\2\2\u01d4\u01d3\3\2\2\2\u01d5=\3\2\2\2\u01d6")
        buf.write("\u01d7\t\3\2\2\u01d7?\3\2\2\2\u01d8\u01d9\7$\2\2\u01d9")
        buf.write("\u01da\5D#\2\u01da\u01db\7\31\2\2\u01db\u01dc\7m\2\2\u01dc")
        buf.write("\u01e1\5B\"\2\u01dd\u01de\7\7\2\2\u01de\u01e0\5B\"\2\u01df")
        buf.write("\u01dd\3\2\2\2\u01e0\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2")
        buf.write("\u01e1\u01e2\3\2\2\2\u01e2\u01e4\3\2\2\2\u01e3\u01e1\3")
        buf.write("\2\2\2\u01e4\u01e5\7n\2\2\u01e5\u01e6\7p\2\2\u01e6A\3")
        buf.write("\2\2\2\u01e7\u01ea\5F$\2\u01e8\u01e9\7%\2\2\u01e9\u01eb")
        buf.write("\5H%\2\u01ea\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01ebC")
        buf.write("\3\2\2\2\u01ec\u01ed\5\u0120\u0091\2\u01edE\3\2\2\2\u01ee")
        buf.write("\u01ef\5\u0120\u0091\2\u01efG\3\2\2\2\u01f0\u01f3\5\u0118")
        buf.write("\u008d\2\u01f1\u01f3\5\u011a\u008e\2\u01f2\u01f0\3\2\2")
        buf.write("\2\u01f2\u01f1\3\2\2\2\u01f3I\3\2\2\2\u01f4\u01f5\5D#")
        buf.write("\2\u01f5\u01f6\7&\2\2\u01f6\u01f8\3\2\2\2\u01f7\u01f4")
        buf.write("\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9")
        buf.write("\u01fa\5F$\2\u01faK\3\2\2\2\u01fb\u01fc\7\'\2\2\u01fc")
        buf.write("\u020a\5P)\2\u01fd\u01fe\7(\2\2\u01fe\u0208\5P)\2\u01ff")
        buf.write("\u0200\7\27\2\2\u0200\u0201\5R*\2\u0201\u0204\7)\2\2\u0202")
        buf.write("\u0205\5J&\2\u0203\u0205\5\u0114\u008b\2\u0204\u0202\3")
        buf.write("\2\2\2\u0204\u0203\3\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207")
        buf.write("\7\30\2\2\u0207\u0209\3\2\2\2\u0208\u01ff\3\2\2\2\u0208")
        buf.write("\u0209\3\2\2\2\u0209\u020b\3\2\2\2\u020a\u01fd\3\2\2\2")
        buf.write("\u020a\u020b\3\2\2\2\u020b\u0216\3\2\2\2\u020c\u020d\7")
        buf.write("\31\2\2\u020d\u020f\7s\2\2\u020e\u0210\5N(\2\u020f\u020e")
        buf.write("\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u020f\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0213\3\2\2\2\u0213\u0214\7t\2\2")
        buf.write("\u0214\u0217\3\2\2\2\u0215\u0217\7p\2\2\u0216\u020c\3")
        buf.write("\2\2\2\u0216\u0215\3\2\2\2\u0217M\3\2\2\2\u0218\u021e")
        buf.write("\5t;\2\u0219\u021e\5\u0090I\2\u021a\u021e\5\u009eP\2\u021b")
        buf.write("\u021e\5\u00aaV\2\u021c\u021e\5\u00b4[\2\u021d\u0218\3")
        buf.write("\2\2\2\u021d\u0219\3\2\2\2\u021d\u021a\3\2\2\2\u021d\u021b")
        buf.write("\3\2\2\2\u021d\u021c\3\2\2\2\u021eO\3\2\2\2\u021f\u0220")
        buf.write("\5\u0120\u0091\2\u0220Q\3\2\2\2\u0221\u0222\5\u0120\u0091")
        buf.write("\2\u0222S\3\2\2\2\u0223\u0224\7*\2\2\u0224\u0232\5X-\2")
        buf.write("\u0225\u0226\7(\2\2\u0226\u0230\5X-\2\u0227\u0228\7\27")
        buf.write("\2\2\u0228\u0229\5R*\2\u0229\u022c\7)\2\2\u022a\u022d")
        buf.write("\5J&\2\u022b\u022d\5\u0114\u008b\2\u022c\u022a\3\2\2\2")
        buf.write("\u022c\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u022f\7")
        buf.write("\30\2\2\u022f\u0231\3\2\2\2\u0230\u0227\3\2\2\2\u0230")
        buf.write("\u0231\3\2\2\2\u0231\u0233\3\2\2\2\u0232\u0225\3\2\2\2")
        buf.write("\u0232\u0233\3\2\2\2\u0233\u023e\3\2\2\2\u0234\u0235\7")
        buf.write("\31\2\2\u0235\u0237\7s\2\2\u0236\u0238\5V,\2\u0237\u0236")
        buf.write("\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u0237\3\2\2\2\u0239")
        buf.write("\u023a\3\2\2\2\u023a\u023b\3\2\2\2\u023b\u023c\7t\2\2")
        buf.write("\u023c\u023f\3\2\2\2\u023d\u023f\7p\2\2\u023e\u0234\3")
        buf.write("\2\2\2\u023e\u023d\3\2\2\2\u023fU\3\2\2\2\u0240\u0246")
        buf.write("\5t;\2\u0241\u0246\5\u0090I\2\u0242\u0246\5\u009eP\2\u0243")
        buf.write("\u0246\5\u00aaV\2\u0244\u0246\5\u00b4[\2\u0245\u0240\3")
        buf.write("\2\2\2\u0245\u0241\3\2\2\2\u0245\u0242\3\2\2\2\u0245\u0243")
        buf.write("\3\2\2\2\u0245\u0244\3\2\2\2\u0246W\3\2\2\2\u0247\u0248")
        buf.write("\5\u0120\u0091\2\u0248Y\3\2\2\2\u0249\u024a\7+\2\2\u024a")
        buf.write("\u0258\5^\60\2\u024b\u024c\7(\2\2\u024c\u0256\5^\60\2")
        buf.write("\u024d\u024e\7\27\2\2\u024e\u024f\5R*\2\u024f\u0252\7")
        buf.write(")\2\2\u0250\u0253\5J&\2\u0251\u0253\5\u0114\u008b\2\u0252")
        buf.write("\u0250\3\2\2\2\u0252\u0251\3\2\2\2\u0253\u0254\3\2\2\2")
        buf.write("\u0254\u0255\7\30\2\2\u0255\u0257\3\2\2\2\u0256\u024d")
        buf.write("\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258")
        buf.write("\u024b\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u0265\3\2\2\2")
        buf.write("\u025a\u025b\7\31\2\2\u025b\u025e\7s\2\2\u025c\u025f\5")
        buf.write("\\/\2\u025d\u025f\5\u00b8]\2\u025e\u025c\3\2\2\2\u025e")
        buf.write("\u025d\3\2\2\2\u025f\u0260\3\2\2\2\u0260\u025e\3\2\2\2")
        buf.write("\u0260\u0261\3\2\2\2\u0261\u0262\3\2\2\2\u0262\u0263\7")
        buf.write("t\2\2\u0263\u0266\3\2\2\2\u0264\u0266\7p\2\2\u0265\u025a")
        buf.write("\3\2\2\2\u0265\u0264\3\2\2\2\u0266[\3\2\2\2\u0267\u026e")
        buf.write("\5t;\2\u0268\u026e\5\u0090I\2\u0269\u026e\5\u009eP\2\u026a")
        buf.write("\u026e\5\u00aaV\2\u026b\u026e\5\u00b4[\2\u026c\u026e\5")
        buf.write("\u00b6\\\2\u026d\u0267\3\2\2\2\u026d\u0268\3\2\2\2\u026d")
        buf.write("\u0269\3\2\2\2\u026d\u026a\3\2\2\2\u026d\u026b\3\2\2\2")
        buf.write("\u026d\u026c\3\2\2\2\u026e]\3\2\2\2\u026f\u0270\5X-\2")
        buf.write("\u0270\u0271\7\4\2\2\u0271\u0273\3\2\2\2\u0272\u026f\3")
        buf.write("\2\2\2\u0272\u0273\3\2\2\2\u0273\u0274\3\2\2\2\u0274\u0275")
        buf.write("\5`\61\2\u0275_\3\2\2\2\u0276\u0277\5\u0120\u0091\2\u0277")
        buf.write("a\3\2\2\2\u0278\u0279\7,\2\2\u0279\u0287\5^\60\2\u027a")
        buf.write("\u027b\7(\2\2\u027b\u0285\5^\60\2\u027c\u027d\7\27\2\2")
        buf.write("\u027d\u027e\5R*\2\u027e\u0281\7)\2\2\u027f\u0282\5J&")
        buf.write("\2\u0280\u0282\5\u0114\u008b\2\u0281\u027f\3\2\2\2\u0281")
        buf.write("\u0280\3\2\2\2\u0282\u0283\3\2\2\2\u0283\u0284\7\30\2")
        buf.write("\2\u0284\u0286\3\2\2\2\u0285\u027c\3\2\2\2\u0285\u0286")
        buf.write("\3\2\2\2\u0286\u0288\3\2\2\2\u0287\u027a\3\2\2\2\u0287")
        buf.write("\u0288\3\2\2\2\u0288\u0294\3\2\2\2\u0289\u028a\7\31\2")
        buf.write("\2\u028a\u028d\7s\2\2\u028b\u028e\5\\/\2\u028c\u028e\5")
        buf.write("\u00b8]\2\u028d\u028b\3\2\2\2\u028d\u028c\3\2\2\2\u028e")
        buf.write("\u028f\3\2\2\2\u028f\u028d\3\2\2\2\u028f\u0290\3\2\2\2")
        buf.write("\u0290\u0291\3\2\2\2\u0291\u0292\7t\2\2\u0292\u0295\3")
        buf.write("\2\2\2\u0293\u0295\7p\2\2\u0294\u0289\3\2\2\2\u0294\u0293")
        buf.write("\3\2\2\2\u0295c\3\2\2\2\u0296\u029a\7-\2\2\u0297\u0298")
        buf.write("\5X-\2\u0298\u0299\7\4\2\2\u0299\u029b\3\2\2\2\u029a\u0297")
        buf.write("\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\3\2\2\2\u029c")
        buf.write("\u029f\5f\64\2\u029d\u029e\7\r\2\2\u029e\u02a0\5^\60\2")
        buf.write("\u029f\u029d\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02ac\3")
        buf.write("\2\2\2\u02a1\u02a2\7\31\2\2\u02a2\u02a5\7s\2\2\u02a3\u02a6")
        buf.write("\5\\/\2\u02a4\u02a6\5\u00ba^\2\u02a5\u02a3\3\2\2\2\u02a5")
        buf.write("\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a5\3\2\2\2")
        buf.write("\u02a7\u02a8\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02aa\7")
        buf.write("t\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02ad\7p\2\2\u02ac\u02a1")
        buf.write("\3\2\2\2\u02ac\u02ab\3\2\2\2\u02ade\3\2\2\2\u02ae\u02af")
        buf.write("\5\u0120\u0091\2\u02afg\3\2\2\2\u02b0\u02b1\7.\2\2\u02b1")
        buf.write("\u02b2\5\u0092J\2\u02b2i\3\2\2\2\u02b3\u02b6\5l\67\2\u02b4")
        buf.write("\u02b6\5n8\2\u02b5\u02b3\3\2\2\2\u02b5\u02b4\3\2\2\2\u02b6")
        buf.write("k\3\2\2\2\u02b7\u02b8\7/\2\2\u02b8\u02b9\5D#\2\u02b9\u02ba")
        buf.write("\7\31\2\2\u02ba\u02bb\7m\2\2\u02bb\u02c0\5B\"\2\u02bc")
        buf.write("\u02bd\7\7\2\2\u02bd\u02bf\5B\"\2\u02be\u02bc\3\2\2\2")
        buf.write("\u02bf\u02c2\3\2\2\2\u02c0\u02be\3\2\2\2\u02c0\u02c1\3")
        buf.write("\2\2\2\u02c1\u02c3\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c3\u02c4")
        buf.write("\7n\2\2\u02c4\u02c5\7p\2\2\u02c5m\3\2\2\2\u02c6\u02c7")
        buf.write("\7/\2\2\u02c7\u02c8\5p9\2\u02c8\u02c9\7\31\2\2\u02c9\u02cb")
        buf.write("\7s\2\2\u02ca\u02cc\5r:\2\u02cb\u02ca\3\2\2\2\u02cc\u02cd")
        buf.write("\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d0\7t\2\2\u02d0o\3\2\2\2\u02d1")
        buf.write("\u02d5\5P)\2\u02d2\u02d5\5X-\2\u02d3\u02d5\5^\60\2\u02d4")
        buf.write("\u02d1\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d4\u02d3\3\2\2\2")
        buf.write("\u02d5q\3\2\2\2\u02d6\u02db\5N(\2\u02d7\u02db\5V,\2\u02d8")
        buf.write("\u02db\5\\/\2\u02d9\u02db\5\u00b8]\2\u02da\u02d6\3\2\2")
        buf.write("\2\u02da\u02d7\3\2\2\2\u02da\u02d8\3\2\2\2\u02da\u02d9")
        buf.write("\3\2\2\2\u02dbs\3\2\2\2\u02dc\u02dd\7\60\2\2\u02dd\u02e2")
        buf.write("\5~@\2\u02de\u02df\7\27\2\2\u02df\u02e0\5\u00dan\2\u02e0")
        buf.write("\u02e1\7\30\2\2\u02e1\u02e3\3\2\2\2\u02e2\u02de\3\2\2")
        buf.write("\2\u02e2\u02e3\3\2\2\2\u02e3\u02e6\3\2\2\2\u02e4\u02e5")
        buf.write("\7\24\2\2\u02e5\u02e7\5v<\2\u02e6\u02e4\3\2\2\2\u02e6")
        buf.write("\u02e7\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9\7p\2\2")
        buf.write("\u02e9u\3\2\2\2\u02ea\u02f0\5x=\2\u02eb\u02ed\5z>\2\u02ec")
        buf.write("\u02eb\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee\3\2\2\2")
        buf.write("\u02ee\u02ef\7\61\2\2\u02ef\u02f1\5\u0082B\2\u02f0\u02ec")
        buf.write("\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2")
        buf.write("\u02f4\5\u0082B\2\u02f3\u02ea\3\2\2\2\u02f3\u02f2\3\2")
        buf.write("\2\2\u02f4w\3\2\2\2\u02f5\u02f6\7\62\2\2\u02f6\u02f7\5")
        buf.write("\u0080A\2\u02f7y\3\2\2\2\u02f8\u02f9\7\63\2\2\u02f9\u02fa")
        buf.write("\5|?\2\u02fa{\3\2\2\2\u02fb\u02fc\5\u0120\u0091\2\u02fc")
        buf.write("}\3\2\2\2\u02fd\u02fe\5\u0120\u0091\2\u02fe\177\3\2\2")
        buf.write("\2\u02ff\u0300\5\u00ecw\2\u0300\u0301\7\4\2\2\u0301\u0303")
        buf.write("\3\2\2\2\u0302\u02ff\3\2\2\2\u0302\u0303\3\2\2\2\u0303")
        buf.write("\u0304\3\2\2\2\u0304\u0305\5~@\2\u0305\u0081\3\2\2\2\u0306")
        buf.write("\u030c\5\u008cG\2\u0307\u030c\5\u0084C\2\u0308\u030c\5")
        buf.write("\u0086D\2\u0309\u030c\5\u0088E\2\u030a\u030c\5\u008aF")
        buf.write("\2\u030b\u0306\3\2\2\2\u030b\u0307\3\2\2\2\u030b\u0308")
        buf.write("\3\2\2\2\u030b\u0309\3\2\2\2\u030b\u030a\3\2\2\2\u030c")
        buf.write("\u0083\3\2\2\2\u030d\u030e\7\64\2\2\u030e\u030f\7\27\2")
        buf.write("\2\u030f\u0310\5\u008cG\2\u0310\u0311\7\30\2\2\u0311\u0085")
        buf.write("\3\2\2\2\u0312\u0313\7\65\2\2\u0313\u0314\7\27\2\2\u0314")
        buf.write("\u0315\5\u008cG\2\u0315\u0316\7\30\2\2\u0316\u0087\3\2")
        buf.write("\2\2\u0317\u0318\7\66\2\2\u0318\u0319\7\27\2\2\u0319\u031a")
        buf.write("\5\u008eH\2\u031a\u031b\7\30\2\2\u031b\u0089\3\2\2\2\u031c")
        buf.write("\u031d\7\67\2\2\u031d\u031e\7\27\2\2\u031e\u0323\5\u008e")
        buf.write("H\2\u031f\u0320\7\7\2\2\u0320\u0321\7\33\2\2\u0321\u0322")
        buf.write("\7\31\2\2\u0322\u0324\5\u008eH\2\u0323\u031f\3\2\2\2\u0323")
        buf.write("\u0324\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0326\7\30\2")
        buf.write("\2\u0326\u008b\3\2\2\2\u0327\u0328\5\u00ecw\2\u0328\u008d")
        buf.write("\3\2\2\2\u0329\u032a\5\u00ecw\2\u032a\u008f\3\2\2\2\u032b")
        buf.write("\u032e\5\u0092J\2\u032c\u032e\5\u0094K\2\u032d\u032b\3")
        buf.write("\2\2\2\u032d\u032c\3\2\2\2\u032e\u0091\3\2\2\2\u032f\u0334")
        buf.write("\5R*\2\u0330\u0331\7\7\2\2\u0331\u0333\5R*\2\u0332\u0330")
        buf.write("\3\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334")
        buf.write("\u0335\3\2\2\2\u0335\u0337\3\2\2\2\u0336\u0334\3\2\2\2")
        buf.write("\u0337\u0338\7\31\2\2\u0338\u033b\5\36\20\2\u0339\u033a")
        buf.write("\7%\2\2\u033a\u033c\5\u0098M\2\u033b\u0339\3\2\2\2\u033b")
        buf.write("\u033c\3\2\2\2\u033c\u033f\3\2\2\2\u033d\u0340\5\u009a")
        buf.write("N\2\u033e\u0340\7p\2\2\u033f\u033d\3\2\2\2\u033f\u033e")
        buf.write("\3\2\2\2\u0340\u0093\3\2\2\2\u0341\u0342\78\2\2\u0342")
        buf.write("\u0347\5R*\2\u0343\u0344\7\7\2\2\u0344\u0346\5R*\2\u0345")
        buf.write("\u0343\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2")
        buf.write("\u0347\u0348\3\2\2\2\u0348\u034a\3\2\2\2\u0349\u0347\3")
        buf.write("\2\2\2\u034a\u034b\7\31\2\2\u034b\u0351\5\36\20\2\u034c")
        buf.write("\u034f\7%\2\2\u034d\u0350\5\u0098M\2\u034e\u0350\5\u0096")
        buf.write("L\2\u034f\u034d\3\2\2\2\u034f\u034e\3\2\2\2\u0350\u0352")
        buf.write("\3\2\2\2\u0351\u034c\3\2\2\2\u0351\u0352\3\2\2\2\u0352")
        buf.write("\u0353\3\2\2\2\u0353\u0354\7p\2\2\u0354\u0095\3\2\2\2")
        buf.write("\u0355\u0356\79\2\2\u0356\u0357\7\27\2\2\u0357\u0358\5")
        buf.write("\u00ecw\2\u0358\u0359\7\7\2\2\u0359\u035c\5v<\2\u035a")
        buf.write("\u035b\7\7\2\2\u035b\u035d\5\u0098M\2\u035c\u035a\3\2")
        buf.write("\2\2\u035c\u035d\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u035f")
        buf.write("\7\30\2\2\u035f\u0097\3\2\2\2\u0360\u0361\5\u00ecw\2\u0361")
        buf.write("\u0099\3\2\2\2\u0362\u0363\7:\2\2\u0363\u0364\7\31\2\2")
        buf.write("\u0364\u0366\7s\2\2\u0365\u0367\5\u009cO\2\u0366\u0365")
        buf.write("\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u0366\3\2\2\2\u0368")
        buf.write("\u0369\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b\7t\2\2")
        buf.write("\u036b\u009b\3\2\2\2\u036c\u036d\5\u009eP\2\u036d\u009d")
        buf.write("\3\2\2\2\u036e\u0371\5\u00a0Q\2\u036f\u0371\5\u00a6T\2")
        buf.write("\u0370\u036e\3\2\2\2\u0370\u036f\3\2\2\2\u0371\u009f\3")
        buf.write("\2\2\2\u0372\u0373\7;\2\2\u0373\u0375\7\27\2\2\u0374\u0376")
        buf.write("\5\u00a2R\2\u0375\u0374\3\2\2\2\u0375\u0376\3\2\2\2\u0376")
        buf.write("\u0377\3\2\2\2\u0377\u0378\5\u00a4S\2\u0378\u0379\7\30")
        buf.write("\2\2\u0379\u037a\7p\2\2\u037a\u00a1\3\2\2\2\u037b\u037c")
        buf.write("\t\4\2\2\u037c\u00a3\3\2\2\2\u037d\u037e\5\u00ecw\2\u037e")
        buf.write("\u00a5\3\2\2\2\u037f\u0380\7>\2\2\u0380\u0381\7\27\2\2")
        buf.write("\u0381\u0382\5\u00a8U\2\u0382\u0383\7\30\2\2\u0383\u0384")
        buf.write("\7p\2\2\u0384\u00a7\3\2\2\2\u0385\u0388\5R*\2\u0386\u0388")
        buf.write("\5\u0108\u0085\2\u0387\u0385\3\2\2\2\u0387\u0386\3\2\2")
        buf.write("\2\u0388\u00a9\3\2\2\2\u0389\u038a\7?\2\2\u038a\u038b")
        buf.write("\5\u00b2Z\2\u038b\u038d\7\27\2\2\u038c\u038e\5\u00dan")
        buf.write("\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f")
        buf.write("\3\2\2\2\u038f\u0392\7\30\2\2\u0390\u0391\7@\2\2\u0391")
        buf.write("\u0393\5\u00acW\2\u0392\u0390\3\2\2\2\u0392\u0393\3\2")
        buf.write("\2\2\u0393\u0394\3\2\2\2\u0394\u0395\5\u00aeX\2\u0395")
        buf.write("\u0396\7p\2\2\u0396\u00ab\3\2\2\2\u0397\u0398\5\36\20")
        buf.write("\2\u0398\u00ad\3\2\2\2\u0399\u039b\7\24\2\2\u039a\u039c")
        buf.write("\5\u00b0Y\2\u039b\u039a\3\2\2\2\u039b\u039c\3\2\2\2\u039c")
        buf.write("\u03a8\3\2\2\2\u039d\u039e\7A\2\2\u039e\u03a9\5\u00ec")
        buf.write("w\2\u039f\u03a9\7B\2\2\u03a0\u03a1\7C\2\2\u03a1\u03a2")
        buf.write("\5\n\6\2\u03a2\u03a4\7\27\2\2\u03a3\u03a5\5\u00e0q\2\u03a4")
        buf.write("\u03a3\3\2\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2")
        buf.write("\u03a6\u03a7\7\30\2\2\u03a7\u03a9\3\2\2\2\u03a8\u039d")
        buf.write("\3\2\2\2\u03a8\u039f\3\2\2\2\u03a8\u03a0\3\2\2\2\u03a9")
        buf.write("\u00af\3\2\2\2\u03aa\u03ab\7D\2\2\u03ab\u00b1\3\2\2\2")
        buf.write("\u03ac\u03ad\5\u0120\u0091\2\u03ad\u00b3\3\2\2\2\u03ae")
        buf.write("\u03af\t\5\2\2\u03af\u03b0\7\27\2\2\u03b0\u03b1\5\u00e0")
        buf.write("q\2\u03b1\u03b2\7\30\2\2\u03b2\u03b3\7p\2\2\u03b3\u00b5")
        buf.write("\3\2\2\2\u03b4\u03b5\5\u00ceh\2\u03b5\u03b6\7\4\2\2\u03b6")
        buf.write("\u03b8\3\2\2\2\u03b7\u03b4\3\2\2\2\u03b7\u03b8\3\2\2\2")
        buf.write("\u03b8\u03b9\3\2\2\2\u03b9\u03ba\5f\64\2\u03ba\u03bc\7")
        buf.write("\27\2\2\u03bb\u03bd\5\u00e0q\2\u03bc\u03bb\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bf\7\30\2")
        buf.write("\2\u03bf\u03c0\7p\2\2\u03c0\u00b7\3\2\2\2\u03c1\u03c4")
        buf.write("\5\u00ba^\2\u03c2\u03c4\5\u00be`\2\u03c3\u03c1\3\2\2\2")
        buf.write("\u03c3\u03c2\3\2\2\2\u03c4\u00b9\3\2\2\2\u03c5\u03c6\7")
        buf.write("G\2\2\u03c6\u03c7\5v<\2\u03c7\u03c8\7\31\2\2\u03c8\u03ca")
        buf.write("\7s\2\2\u03c9\u03cb\5\u00bc_\2\u03ca\u03c9\3\2\2\2\u03cb")
        buf.write("\u03cc\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cc\u03cd\3\2\2\2")
        buf.write("\u03cd\u03ce\3\2\2\2\u03ce\u03cf\7t\2\2\u03cf\u00bb\3")
        buf.write("\2\2\2\u03d0\u03d3\5\u00d4k\2\u03d1\u03d3\5\u00d2j\2\u03d2")
        buf.write("\u03d0\3\2\2\2\u03d2\u03d1\3\2\2\2\u03d3\u00bd\3\2\2\2")
        buf.write("\u03d4\u03d5\7H\2\2\u03d5\u03d6\5\u00c0a\2\u03d6\u00bf")
        buf.write("\3\2\2\2\u03d7\u03d8\5\u00c2b\2\u03d8\u03d9\7\31\2\2\u03d9")
        buf.write("\u03db\3\2\2\2\u03da\u03d7\3\2\2\2\u03da\u03db\3\2\2\2")
        buf.write("\u03db\u03e1\3\2\2\2\u03dc\u03e2\5\u00c4c\2\u03dd\u03e2")
        buf.write("\5\u00c8e\2\u03de\u03e2\5\u00d0i\2\u03df\u03e2\5\u00d2")
        buf.write("j\2\u03e0\u03e2\5\u00d4k\2\u03e1\u03dc\3\2\2\2\u03e1\u03dd")
        buf.write("\3\2\2\2\u03e1\u03de\3\2\2\2\u03e1\u03df\3\2\2\2\u03e1")
        buf.write("\u03e0\3\2\2\2\u03e2\u00c1\3\2\2\2\u03e3\u03e4\5\u0120")
        buf.write("\u0091\2\u03e4\u00c3\3\2\2\2\u03e5\u03eb\5\u00c6d\2\u03e6")
        buf.write("\u03e8\7\27\2\2\u03e7\u03e9\5\u00e6t\2\u03e8\u03e7\3\2")
        buf.write("\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ec")
        buf.write("\7\30\2\2\u03eb\u03e6\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec")
        buf.write("\u03ed\3\2\2\2\u03ed\u03ee\7\31\2\2\u03ee\u03f0\7s\2\2")
        buf.write("\u03ef\u03f1\5\u00c0a\2\u03f0\u03ef\3\2\2\2\u03f1\u03f2")
        buf.write("\3\2\2\2\u03f2\u03f0\3\2\2\2\u03f2\u03f3\3\2\2\2\u03f3")
        buf.write("\u03f4\3\2\2\2\u03f4\u03f6\7t\2\2\u03f5\u03f7\5\u00ca")
        buf.write("f\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3\2\2\2\u03f7\u00c5")
        buf.write("\3\2\2\2\u03f8\u03f9\t\6\2\2\u03f9\u00c7\3\2\2\2\u03fa")
        buf.write("\u03fb\5\u00ceh\2\u03fb\u03fc\7\4\2\2\u03fc\u03fe\3\2")
        buf.write("\2\2\u03fd\u03fa\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff")
        buf.write("\3\2\2\2\u03ff\u0400\5`\61\2\u0400\u0402\7\27\2\2\u0401")
        buf.write("\u0403\5\u00e0q\2\u0402\u0401\3\2\2\2\u0402\u0403\3\2")
        buf.write("\2\2\u0403\u0404\3\2\2\2\u0404\u0407\7\30\2\2\u0405\u0408")
        buf.write("\5\u00caf\2\u0406\u0408\7p\2\2\u0407\u0405\3\2\2\2\u0407")
        buf.write("\u0406\3\2\2\2\u0408\u00c9\3\2\2\2\u0409\u040a\7:\2\2")
        buf.write("\u040a\u040b\7\31\2\2\u040b\u040d\7s\2\2\u040c\u040e\5")
        buf.write("\u00ccg\2\u040d\u040c\3\2\2\2\u040e\u040f\3\2\2\2\u040f")
        buf.write("\u040d\3\2\2\2\u040f\u0410\3\2\2\2\u0410\u0411\3\2\2\2")
        buf.write("\u0411\u0412\7t\2\2\u0412\u00cb\3\2\2\2\u0413\u0417\5")
        buf.write("\u009eP\2\u0414\u0417\5\u00b6\\\2\u0415\u0417\5\u00d8")
        buf.write("m\2\u0416\u0413\3\2\2\2\u0416\u0414\3\2\2\2\u0416\u0415")
        buf.write("\3\2\2\2\u0417\u00cd\3\2\2\2\u0418\u0419\5\u00ecw\2\u0419")
        buf.write("\u00cf\3\2\2\2\u041a\u041b\7L\2\2\u041b\u041c\5v<\2\u041c")
        buf.write("\u041d\7p\2\2\u041d\u00d1\3\2\2\2\u041e\u041f\7M\2\2\u041f")
        buf.write("\u0424\5~@\2\u0420\u0421\7\27\2\2\u0421\u0422\5\u00e0")
        buf.write("q\2\u0422\u0423\7\30\2\2\u0423\u0425\3\2\2\2\u0424\u0420")
        buf.write("\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\3\2\2\2\u0426")
        buf.write("\u0427\7p\2\2\u0427\u00d3\3\2\2\2\u0428\u0429\7N\2\2\u0429")
        buf.write("\u042a\5\u00d6l\2\u042a\u042b\7p\2\2\u042b\u00d5\3\2\2")
        buf.write("\2\u042c\u042d\5\u0106\u0084\2\u042d\u042f\7\27\2\2\u042e")
        buf.write("\u0430\5\u00e0q\2\u042f\u042e\3\2\2\2\u042f\u0430\3\2")
        buf.write("\2\2\u0430\u0431\3\2\2\2\u0431\u0432\7\30\2\2\u0432\u00d7")
        buf.write("\3\2\2\2\u0433\u0434\7O\2\2\u0434\u0435\5v<\2\u0435\u0436")
        buf.write("\7p\2\2\u0436\u00d9\3\2\2\2\u0437\u043c\5\u00dco\2\u0438")
        buf.write("\u0439\7\7\2\2\u0439\u043b\5\u00dco\2\u043a\u0438\3\2")
        buf.write("\2\2\u043b\u043e\3\2\2\2\u043c\u043a\3\2\2\2\u043c\u043d")
        buf.write("\3\2\2\2\u043d\u00db\3\2\2\2\u043e\u043c\3\2\2\2\u043f")
        buf.write("\u0440\5\u00dep\2\u0440\u0441\7\31\2\2\u0441\u0444\5\36")
        buf.write("\20\2\u0442\u0443\7%\2\2\u0443\u0445\5\u0098M\2\u0444")
        buf.write("\u0442\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u00dd\3\2\2\2")
        buf.write("\u0446\u0447\5\u0120\u0091\2\u0447\u00df\3\2\2\2\u0448")
        buf.write("\u044d\5\u00e2r\2\u0449\u044a\7\7\2\2\u044a\u044c\5\u00e2")
        buf.write("r\2\u044b\u0449\3\2\2\2\u044c\u044f\3\2\2\2\u044d\u044b")
        buf.write("\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u0454\3\2\2\2\u044f")
        buf.write("\u044d\3\2\2\2\u0450\u0451\7\7\2\2\u0451\u0453\5\u00e4")
        buf.write("s\2\u0452\u0450\3\2\2\2\u0453\u0456\3\2\2\2\u0454\u0452")
        buf.write("\3\2\2\2\u0454\u0455\3\2\2\2\u0455\u0460\3\2\2\2\u0456")
        buf.write("\u0454\3\2\2\2\u0457\u045c\5\u00e4s\2\u0458\u0459\7\7")
        buf.write("\2\2\u0459\u045b\5\u00e4s\2\u045a\u0458\3\2\2\2\u045b")
        buf.write("\u045e\3\2\2\2\u045c\u045a\3\2\2\2\u045c\u045d\3\2\2\2")
        buf.write("\u045d\u0460\3\2\2\2\u045e\u045c\3\2\2\2\u045f\u0448\3")
        buf.write("\2\2\2\u045f\u0457\3\2\2\2\u0460\u00e1\3\2\2\2\u0461\u0462")
        buf.write("\5\u00ecw\2\u0462\u00e3\3\2\2\2\u0463\u0464\5\u00dep\2")
        buf.write("\u0464\u0465\7\31\2\2\u0465\u0466\5\u00ecw\2\u0466\u00e5")
        buf.write("\3\2\2\2\u0467\u046c\5\u00e2r\2\u0468\u0469\7\7\2\2\u0469")
        buf.write("\u046b\5\u00e2r\2\u046a\u0468\3\2\2\2\u046b\u046e\3\2")
        buf.write("\2\2\u046c\u046a\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u0473")
        buf.write("\3\2\2\2\u046e\u046c\3\2\2\2\u046f\u0470\7\7\2\2\u0470")
        buf.write("\u0472\5\u00eav\2\u0471\u046f\3\2\2\2\u0472\u0475\3\2")
        buf.write("\2\2\u0473\u0471\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u047f")
        buf.write("\3\2\2\2\u0475\u0473\3\2\2\2\u0476\u047b\5\u00eav\2\u0477")
        buf.write("\u0478\7\7\2\2\u0478\u047a\5\u00eav\2\u0479\u0477\3\2")
        buf.write("\2\2\u047a\u047d\3\2\2\2\u047b\u0479\3\2\2\2\u047b\u047c")
        buf.write("\3\2\2\2\u047c\u047f\3\2\2\2\u047d\u047b\3\2\2\2\u047e")
        buf.write("\u0467\3\2\2\2\u047e\u0476\3\2\2\2\u047f\u00e7\3\2\2\2")
        buf.write("\u0480\u0481\5\u011e\u0090\2\u0481\u00e9\3\2\2\2\u0482")
        buf.write("\u0483\5\u00e8u\2\u0483\u0484\7\31\2\2\u0484\u0485\5\u00ec")
        buf.write("w\2\u0485\u00eb\3\2\2\2\u0486\u0489\5\u00f0y\2\u0487\u0489")
        buf.write("\5\u00eex\2\u0488\u0486\3\2\2\2\u0488\u0487\3\2\2\2\u0489")
        buf.write("\u00ed\3\2\2\2\u048a\u048b\5\u00f0y\2\u048b\u048c\7P\2")
        buf.write("\2\u048c\u048d\5\u00ecw\2\u048d\u048e\7\31\2\2\u048e\u048f")
        buf.write("\5\u00ecw\2\u048f\u00ef\3\2\2\2\u0490\u0495\5\u00f2z\2")
        buf.write("\u0491\u0492\7Q\2\2\u0492\u0494\5\u00f2z\2\u0493\u0491")
        buf.write("\3\2\2\2\u0494\u0497\3\2\2\2\u0495\u0493\3\2\2\2\u0495")
        buf.write("\u0496\3\2\2\2\u0496\u00f1\3\2\2\2\u0497\u0495\3\2\2\2")
        buf.write("\u0498\u049d\5\u00f4{\2\u0499\u049a\7R\2\2\u049a\u049c")
        buf.write("\5\u00f4{\2\u049b\u0499\3\2\2\2\u049c\u049f\3\2\2\2\u049d")
        buf.write("\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u00f3\3\2\2\2")
        buf.write("\u049f\u049d\3\2\2\2\u04a0\u04a5\5\u00f6|\2\u04a1\u04a2")
        buf.write("\7S\2\2\u04a2\u04a4\5\u00f6|\2\u04a3\u04a1\3\2\2\2\u04a4")
        buf.write("\u04a7\3\2\2\2\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3\2\2\2")
        buf.write("\u04a6\u00f5\3\2\2\2\u04a7\u04a5\3\2\2\2\u04a8\u04a9\7")
        buf.write("T\2\2\u04a9\u04ac\5\u00f6|\2\u04aa\u04ac\5\u00f8}\2\u04ab")
        buf.write("\u04a8\3\2\2\2\u04ab\u04aa\3\2\2\2\u04ac\u00f7\3\2\2\2")
        buf.write("\u04ad\u04ae\b}\1\2\u04ae\u04af\5\u00fc\177\2\u04af\u04b6")
        buf.write("\3\2\2\2\u04b0\u04b1\f\3\2\2\u04b1\u04b2\5\u00fa~\2\u04b2")
        buf.write("\u04b3\5\u00fc\177\2\u04b3\u04b5\3\2\2\2\u04b4\u04b0\3")
        buf.write("\2\2\2\u04b5\u04b8\3\2\2\2\u04b6\u04b4\3\2\2\2\u04b6\u04b7")
        buf.write("\3\2\2\2\u04b7\u00f9\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b9")
        buf.write("\u04ba\t\7\2\2\u04ba\u00fb\3\2\2\2\u04bb\u04bc\b\177\1")
        buf.write("\2\u04bc\u04bd\5\u0100\u0081\2\u04bd\u04c4\3\2\2\2\u04be")
        buf.write("\u04bf\f\3\2\2\u04bf\u04c0\5\u00fe\u0080\2\u04c0\u04c1")
        buf.write("\5\u0100\u0081\2\u04c1\u04c3\3\2\2\2\u04c2\u04be\3\2\2")
        buf.write("\2\u04c3\u04c6\3\2\2\2\u04c4\u04c2\3\2\2\2\u04c4\u04c5")
        buf.write("\3\2\2\2\u04c5\u00fd\3\2\2\2\u04c6\u04c4\3\2\2\2\u04c7")
        buf.write("\u04c8\t\b\2\2\u04c8\u00ff\3\2\2\2\u04c9\u04ca\b\u0081")
        buf.write("\1\2\u04ca\u04cb\5\u0104\u0083\2\u04cb\u04d2\3\2\2\2\u04cc")
        buf.write("\u04cd\f\3\2\2\u04cd\u04ce\5\u0102\u0082\2\u04ce\u04cf")
        buf.write("\5\u0104\u0083\2\u04cf\u04d1\3\2\2\2\u04d0\u04cc\3\2\2")
        buf.write("\2\u04d1\u04d4\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d2\u04d3")
        buf.write("\3\2\2\2\u04d3\u0101\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d5")
        buf.write("\u04d6\t\t\2\2\u04d6\u0103\3\2\2\2\u04d7\u04db\5\u0106")
        buf.write("\u0084\2\u04d8\u04d9\7\\\2\2\u04d9\u04db\5\u0104\u0083")
        buf.write("\2\u04da\u04d7\3\2\2\2\u04da\u04d8\3\2\2\2\u04db\u0105")
        buf.write("\3\2\2\2\u04dc\u04dd\b\u0084\1\2\u04dd\u04de\5\u010a\u0086")
        buf.write("\2\u04de\u04fd\3\2\2\2\u04df\u04e0\f\7\2\2\u04e0\u04e1")
        buf.write("\7\4\2\2\u04e1\u04e2\7\63\2\2\u04e2\u04e3\7\27\2\2\u04e3")
        buf.write("\u04e4\5\36\20\2\u04e4\u04e5\7\30\2\2\u04e5\u04fc\3\2")
        buf.write("\2\2\u04e6\u04e7\f\6\2\2\u04e7\u04e8\7\4\2\2\u04e8\u04e9")
        buf.write("\7\24\2\2\u04e9\u04ea\7\27\2\2\u04ea\u04eb\5\36\20\2\u04eb")
        buf.write("\u04ec\7\30\2\2\u04ec\u04fc\3\2\2\2\u04ed\u04ee\f\5\2")
        buf.write("\2\u04ee\u04ef\7m\2\2\u04ef\u04f0\5\u00ecw\2\u04f0\u04f1")
        buf.write("\7n\2\2\u04f1\u04fc\3\2\2\2\u04f2\u04f3\f\4\2\2\u04f3")
        buf.write("\u04f5\7\27\2\2\u04f4\u04f6\5\u00e0q\2\u04f5\u04f4\3\2")
        buf.write("\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\u04fc")
        buf.write("\7\30\2\2\u04f8\u04f9\f\3\2\2\u04f9\u04fa\7\4\2\2\u04fa")
        buf.write("\u04fc\5R*\2\u04fb\u04df\3\2\2\2\u04fb\u04e6\3\2\2\2\u04fb")
        buf.write("\u04ed\3\2\2\2\u04fb\u04f2\3\2\2\2\u04fb\u04f8\3\2\2\2")
        buf.write("\u04fc\u04ff\3\2\2\2\u04fd\u04fb\3\2\2\2\u04fd\u04fe\3")
        buf.write("\2\2\2\u04fe\u0107\3\2\2\2\u04ff\u04fd\3\2\2\2\u0500\u0501")
        buf.write("\5\u0106\u0084\2\u0501\u0502\7\4\2\2\u0502\u0503\5R*\2")
        buf.write("\u0503\u0109\3\2\2\2\u0504\u050c\5\u010c\u0087\2\u0505")
        buf.write("\u050c\7_\2\2\u0506\u050c\5\u0120\u0091\2\u0507\u0508")
        buf.write("\7\27\2\2\u0508\u0509\5\u00ecw\2\u0509\u050a\7\30\2\2")
        buf.write("\u050a\u050c\3\2\2\2\u050b\u0504\3\2\2\2\u050b\u0505\3")
        buf.write("\2\2\2\u050b\u0506\3\2\2\2\u050b\u0507\3\2\2\2\u050c\u010b")
        buf.write("\3\2\2\2\u050d\u0516\5\u0116\u008c\2\u050e\u0516\5\u011c")
        buf.write("\u008f\2\u050f\u0516\5\u0124\u0093\2\u0510\u0516\5\u0114")
        buf.write("\u008b\2\u0511\u0516\5\u0112\u008a\2\u0512\u0516\5J&\2")
        buf.write("\u0513\u0516\5\u010e\u0088\2\u0514\u0516\5\u0110\u0089")
        buf.write("\2\u0515\u050d\3\2\2\2\u0515\u050e\3\2\2\2\u0515\u050f")
        buf.write("\3\2\2\2\u0515\u0510\3\2\2\2\u0515\u0511\3\2\2\2\u0515")
        buf.write("\u0512\3\2\2\2\u0515\u0513\3\2\2\2\u0515\u0514\3\2\2\2")
        buf.write("\u0516\u010d\3\2\2\2\u0517\u0518\7m\2\2\u0518\u051d\5")
        buf.write("\u00ecw\2\u0519\u051a\7\7\2\2\u051a\u051c\5\u00ecw\2\u051b")
        buf.write("\u0519\3\2\2\2\u051c\u051f\3\2\2\2\u051d\u051b\3\2\2\2")
        buf.write("\u051d\u051e\3\2\2\2\u051e\u0520\3\2\2\2\u051f\u051d\3")
        buf.write("\2\2\2\u0520\u0521\7n\2\2\u0521\u010f\3\2\2\2\u0522\u0523")
        buf.write("\7`\2\2\u0523\u0524\7\27\2\2\u0524\u0525\5\u00ecw\2\u0525")
        buf.write("\u0526\7\7\2\2\u0526\u0527\5\u00ecw\2\u0527\u0528\7\30")
        buf.write("\2\2\u0528\u0530\3\2\2\2\u0529\u052a\7m\2\2\u052a\u052b")
        buf.write("\5\u00ecw\2\u052b\u052c\7a\2\2\u052c\u052d\5\u00ecw\2")
        buf.write("\u052d\u052e\7n\2\2\u052e\u0530\3\2\2\2\u052f\u0522\3")
        buf.write("\2\2\2\u052f\u0529\3\2\2\2\u0530\u0111\3\2\2\2\u0531\u0532")
        buf.write("\7b\2\2\u0532\u0113\3\2\2\2\u0533\u0534\7e\2\2\u0534\u0115")
        buf.write("\3\2\2\2\u0535\u0536\7f\2\2\u0536\u0117\3\2\2\2\u0537")
        buf.write("\u0538\7g\2\2\u0538\u0119\3\2\2\2\u0539\u053a\7h\2\2\u053a")
        buf.write("\u011b\3\2\2\2\u053b\u053c\7j\2\2\u053c\u011d\3\2\2\2")
        buf.write("\u053d\u0557\7k\2\2\u053e\u0557\7\3\2\2\u053f\u0557\7")
        buf.write("\5\2\2\u0540\u0557\7\6\2\2\u0541\u0557\7\b\2\2\u0542\u0557")
        buf.write("\7\t\2\2\u0543\u0557\7\23\2\2\u0544\u0557\7\25\2\2\u0545")
        buf.write("\u0557\5> \2\u0546\u0557\7\32\2\2\u0547\u0557\7\33\2\2")
        buf.write("\u0548\u0557\7$\2\2\u0549\u0557\7\'\2\2\u054a\u0557\7")
        buf.write("*\2\2\u054b\u0557\7+\2\2\u054c\u0557\7,\2\2\u054d\u0557")
        buf.write("\7-\2\2\u054e\u0557\7/\2\2\u054f\u0557\7(\2\2\u0550\u0557")
        buf.write("\7.\2\2\u0551\u0557\7\60\2\2\u0552\u0557\7?\2\2\u0553")
        buf.write("\u0557\7B\2\2\u0554\u0557\7A\2\2\u0555\u0557\7C\2\2\u0556")
        buf.write("\u053d\3\2\2\2\u0556\u053e\3\2\2\2\u0556\u053f\3\2\2\2")
        buf.write("\u0556\u0540\3\2\2\2\u0556\u0541\3\2\2\2\u0556\u0542\3")
        buf.write("\2\2\2\u0556\u0543\3\2\2\2\u0556\u0544\3\2\2\2\u0556\u0545")
        buf.write("\3\2\2\2\u0556\u0546\3\2\2\2\u0556\u0547\3\2\2\2\u0556")
        buf.write("\u0548\3\2\2\2\u0556\u0549\3\2\2\2\u0556\u054a\3\2\2\2")
        buf.write("\u0556\u054b\3\2\2\2\u0556\u054c\3\2\2\2\u0556\u054d\3")
        buf.write("\2\2\2\u0556\u054e\3\2\2\2\u0556\u054f\3\2\2\2\u0556\u0550")
        buf.write("\3\2\2\2\u0556\u0551\3\2\2\2\u0556\u0552\3\2\2\2\u0556")
        buf.write("\u0553\3\2\2\2\u0556\u0554\3\2\2\2\u0556\u0555\3\2\2\2")
        buf.write("\u0557\u011f\3\2\2\2\u0558\u055b\5\u011e\u0090\2\u0559")
        buf.write("\u055b\5\u0122\u0092\2\u055a\u0558\3\2\2\2\u055a\u0559")
        buf.write("\3\2\2\2\u055b\u0121\3\2\2\2\u055c\u055e\5\22\n\2\u055d")
        buf.write("\u055c\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u055f\3\2\2\2")
        buf.write("\u055f\u0560\7\n\2\2\u0560\u0561\5\u011e\u0090\2\u0561")
        buf.write("\u0123\3\2\2\2\u0562\u0563\7l\2\2\u0563\u0125\3\2\2\2")
        buf.write("\u0564\u0565\7k\2\2\u0565\u0567\7\n\2\2\u0566\u0564\3")
        buf.write("\2\2\2\u0566\u0567\3\2\2\2\u0567\u056a\3\2\2\2\u0568\u056b")
        buf.write("\7k\2\2\u0569\u056b\5> \2\u056a\u0568\3\2\2\2\u056a\u0569")
        buf.write("\3\2\2\2\u056b\u0127\3\2\2\2\u0088\u012b\u0131\u013e\u0145")
        buf.write("\u014d\u0153\u015c\u0161\u016b\u0172\u0175\u0178\u0186")
        buf.write("\u018a\u018e\u01b6\u01c2\u01c6\u01ce\u01d4\u01e1\u01ea")
        buf.write("\u01f2\u01f7\u0204\u0208\u020a\u0211\u0216\u021d\u022c")
        buf.write("\u0230\u0232\u0239\u023e\u0245\u0252\u0256\u0258\u025e")
        buf.write("\u0260\u0265\u026d\u0272\u0281\u0285\u0287\u028d\u028f")
        buf.write("\u0294\u029a\u029f\u02a5\u02a7\u02ac\u02b5\u02c0\u02cd")
        buf.write("\u02d4\u02da\u02e2\u02e6\u02ec\u02f0\u02f3\u0302\u030b")
        buf.write("\u0323\u032d\u0334\u033b\u033f\u0347\u034f\u0351\u035c")
        buf.write("\u0368\u0370\u0375\u0387\u038d\u0392\u039b\u03a4\u03a8")
        buf.write("\u03b7\u03bc\u03c3\u03cc\u03d2\u03da\u03e1\u03e8\u03eb")
        buf.write("\u03f2\u03f6\u03fd\u0402\u0407\u040f\u0416\u0424\u042f")
        buf.write("\u043c\u0444\u044d\u0454\u045c\u045f\u046c\u0473\u047b")
        buf.write("\u047e\u0488\u0495\u049d\u04a5\u04ab\u04b6\u04c4\u04d2")
        buf.write("\u04da\u04f5\u04fb\u04fd\u050b\u0515\u051d\u052f\u0556")
        buf.write("\u055a\u055d\u0566\u056a")
        return buf.getvalue()


class openscenario2Parser ( Parser ):

    grammarFileName = "openscenario2.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'import'", "'.'", "'namespace'", "'use'", 
                     "','", "'null'", "'export'", "'::'", "'*'", "'list'", 
                     "'of'", "'int'", "'uint'", "'float'", "'bool'", "'string'", 
                     "'type'", "'is'", "'unit'", "'SI'", "'('", "')'", "':'", 
                     "'factor'", "'offset'", "'kg'", "'m'", "'s'", "'A'", 
                     "'K'", "'mol'", "'cd'", "'rad'", "'enum'", "'='", "'!'", 
                     "'struct'", "'inherits'", "'=='", "'actor'", "'scenario'", 
                     "'action'", "'modifier'", "'global'", "'extend'", "'event'", 
                     "'if'", "'@'", "'as'", "'rise'", "'fall'", "'elapsed'", 
                     "'every'", "'var'", "'sample'", "'with'", "'keep'", 
                     "'default'", "'hard'", "'remove_default'", "'def'", 
                     "'->'", "'expression'", "'undefined'", "'external'", 
                     "'only'", "'cover'", "'record'", "'on'", "'do'", "'serial'", 
                     "'one_of'", "'parallel'", "'wait'", "'emit'", "'call'", 
                     "'until'", "'?'", "'=>'", "'or'", "'and'", "'not'", 
                     "'!='", "'<'", "'<='", "'>'", "'>='", "'in'", "'+'", 
                     "'-'", "'/'", "'%'", "'it'", "'range'", "'..'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "STRING_LITERAL", "SHORTSTRING", "LONGSTRING", "BOOL_LITERAL", 
                      "INTEGER_LITERAL", "UINT_LITERAL", "HEX_UINT_LITERAL", 
                      "INT_LITERAL", "FLOAT_LITERAL", "IDENTIFIER", "PHYSICAL_LITERAL", 
                      "OPEN_BRACKET", "CLOSE_BRACKET", "LINEJOINER", "NEWLINE", 
                      "WS", "COMMENT", "INDENT", "DEDENT" ]

    RULE_osc_file = 0
    RULE_prelude_statement = 1
    RULE_import_statement = 2
    RULE_import_reference = 3
    RULE_structured_identifier = 4
    RULE_main_statement = 5
    RULE_namespace_statement = 6
    RULE_namespace_list = 7
    RULE_namespace_name = 8
    RULE_global_namespace_name = 9
    RULE_export_statement = 10
    RULE_export_specification = 11
    RULE_export_wildcard_specification = 12
    RULE_osc_declaration = 13
    RULE_type_declarator = 14
    RULE_non_aggregate_type_declarator = 15
    RULE_declared_type_name = 16
    RULE_aggregate_type_declarator = 17
    RULE_list_type_declarator = 18
    RULE_primitive_type = 19
    RULE_physical_type_declaration = 20
    RULE_unit_declaration = 21
    RULE_base_unit_specifier = 22
    RULE_unit_specifier = 23
    RULE_si_base_unit_specifier = 24
    RULE_si_base_exponent_list = 25
    RULE_si_base_exponent = 26
    RULE_si_unit_specifier = 27
    RULE_si_factor = 28
    RULE_si_offset = 29
    RULE_si_base_unit_name = 30
    RULE_enum_declaration = 31
    RULE_enum_member_decl = 32
    RULE_enum_name = 33
    RULE_enum_member_name = 34
    RULE_enum_member_value = 35
    RULE_enum_value_reference = 36
    RULE_struct_declaration = 37
    RULE_struct_member_decl = 38
    RULE_struct_name = 39
    RULE_field_name = 40
    RULE_actor_declaration = 41
    RULE_actor_member_decl = 42
    RULE_actor_name = 43
    RULE_scenario_declaration = 44
    RULE_scenario_member_decl = 45
    RULE_qualified_behavior_name = 46
    RULE_behavior_name = 47
    RULE_action_declaration = 48
    RULE_modifier_declaration = 49
    RULE_modifier_name = 50
    RULE_global_parameter_declaration = 51
    RULE_type_extension = 52
    RULE_enum_type_extension = 53
    RULE_structured_type_extension = 54
    RULE_extendable_type_name = 55
    RULE_extension_member_decl = 56
    RULE_event_declaration = 57
    RULE_event_specification = 58
    RULE_event_reference = 59
    RULE_event_field_decl = 60
    RULE_event_field_name = 61
    RULE_event_name = 62
    RULE_event_path = 63
    RULE_event_condition = 64
    RULE_rise_expression = 65
    RULE_fall_expression = 66
    RULE_elapsed_expression = 67
    RULE_every_expression = 68
    RULE_bool_expression = 69
    RULE_duration_expression = 70
    RULE_field_declaration = 71
    RULE_parameter_declaration = 72
    RULE_variable_declaration = 73
    RULE_sample_expression = 74
    RULE_default_value = 75
    RULE_parameter_with_declaration = 76
    RULE_parameter_with_member = 77
    RULE_constraint_declaration = 78
    RULE_keep_constraint_declaration = 79
    RULE_constraint_qualifier = 80
    RULE_constraint_expression = 81
    RULE_remove_default_declaration = 82
    RULE_parameter_reference = 83
    RULE_method_declaration = 84
    RULE_return_type = 85
    RULE_method_implementation = 86
    RULE_method_qualifier = 87
    RULE_method_name = 88
    RULE_coverage_declaration = 89
    RULE_modifier_application = 90
    RULE_behavior_specification = 91
    RULE_on_directive = 92
    RULE_on_member = 93
    RULE_do_directive = 94
    RULE_do_member = 95
    RULE_label_name = 96
    RULE_composition = 97
    RULE_composition_operator = 98
    RULE_behavior_invocation = 99
    RULE_behavior_with_declaration = 100
    RULE_behavior_with_member = 101
    RULE_actor_expression = 102
    RULE_wait_directive = 103
    RULE_emit_directive = 104
    RULE_call_directive = 105
    RULE_method_invocation = 106
    RULE_until_directive = 107
    RULE_argument_list_specification = 108
    RULE_argument_specification = 109
    RULE_argument_name = 110
    RULE_argument_list = 111
    RULE_positional_argument = 112
    RULE_named_argument = 113
    RULE_unqualified_argument_list = 114
    RULE_unqualified_argument_name = 115
    RULE_unqualified_named_argument = 116
    RULE_expression = 117
    RULE_ternary_op_exp = 118
    RULE_implication = 119
    RULE_disjunction = 120
    RULE_conjunction = 121
    RULE_inversion = 122
    RULE_relation = 123
    RULE_relational_op = 124
    RULE_sum_exp = 125
    RULE_additive_op = 126
    RULE_term = 127
    RULE_multiplicative_op = 128
    RULE_factor = 129
    RULE_postfix_exp = 130
    RULE_field_access = 131
    RULE_primary_exp = 132
    RULE_value_exp = 133
    RULE_list_constructor = 134
    RULE_range_constructor = 135
    RULE_string_literal = 136
    RULE_bool_literal = 137
    RULE_integer_literal = 138
    RULE_uint_literal = 139
    RULE_hex_uint_literal = 140
    RULE_float_literal = 141
    RULE_identifier = 142
    RULE_qualified_identifier = 143
    RULE_prefixed_identifier = 144
    RULE_physical_literal = 145
    RULE_unit_name = 146

    ruleNames =  [ "osc_file", "prelude_statement", "import_statement", 
                   "import_reference", "structured_identifier", "main_statement", 
                   "namespace_statement", "namespace_list", "namespace_name", 
                   "global_namespace_name", "export_statement", "export_specification", 
                   "export_wildcard_specification", "osc_declaration", "type_declarator", 
                   "non_aggregate_type_declarator", "declared_type_name", 
                   "aggregate_type_declarator", "list_type_declarator", 
                   "primitive_type", "physical_type_declaration", "unit_declaration", 
                   "base_unit_specifier", "unit_specifier", "si_base_unit_specifier", 
                   "si_base_exponent_list", "si_base_exponent", "si_unit_specifier", 
                   "si_factor", "si_offset", "si_base_unit_name", "enum_declaration", 
                   "enum_member_decl", "enum_name", "enum_member_name", 
                   "enum_member_value", "enum_value_reference", "struct_declaration", 
                   "struct_member_decl", "struct_name", "field_name", "actor_declaration", 
                   "actor_member_decl", "actor_name", "scenario_declaration", 
                   "scenario_member_decl", "qualified_behavior_name", "behavior_name", 
                   "action_declaration", "modifier_declaration", "modifier_name", 
                   "global_parameter_declaration", "type_extension", "enum_type_extension", 
                   "structured_type_extension", "extendable_type_name", 
                   "extension_member_decl", "event_declaration", "event_specification", 
                   "event_reference", "event_field_decl", "event_field_name", 
                   "event_name", "event_path", "event_condition", "rise_expression", 
                   "fall_expression", "elapsed_expression", "every_expression", 
                   "bool_expression", "duration_expression", "field_declaration", 
                   "parameter_declaration", "variable_declaration", "sample_expression", 
                   "default_value", "parameter_with_declaration", "parameter_with_member", 
                   "constraint_declaration", "keep_constraint_declaration", 
                   "constraint_qualifier", "constraint_expression", "remove_default_declaration", 
                   "parameter_reference", "method_declaration", "return_type", 
                   "method_implementation", "method_qualifier", "method_name", 
                   "coverage_declaration", "modifier_application", "behavior_specification", 
                   "on_directive", "on_member", "do_directive", "do_member", 
                   "label_name", "composition", "composition_operator", 
                   "behavior_invocation", "behavior_with_declaration", "behavior_with_member", 
                   "actor_expression", "wait_directive", "emit_directive", 
                   "call_directive", "method_invocation", "until_directive", 
                   "argument_list_specification", "argument_specification", 
                   "argument_name", "argument_list", "positional_argument", 
                   "named_argument", "unqualified_argument_list", "unqualified_argument_name", 
                   "unqualified_named_argument", "expression", "ternary_op_exp", 
                   "implication", "disjunction", "conjunction", "inversion", 
                   "relation", "relational_op", "sum_exp", "additive_op", 
                   "term", "multiplicative_op", "factor", "postfix_exp", 
                   "field_access", "primary_exp", "value_exp", "list_constructor", 
                   "range_constructor", "string_literal", "bool_literal", 
                   "integer_literal", "uint_literal", "hex_uint_literal", 
                   "float_literal", "identifier", "qualified_identifier", 
                   "prefixed_identifier", "physical_literal", "unit_name" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    STRING_LITERAL=96
    SHORTSTRING=97
    LONGSTRING=98
    BOOL_LITERAL=99
    INTEGER_LITERAL=100
    UINT_LITERAL=101
    HEX_UINT_LITERAL=102
    INT_LITERAL=103
    FLOAT_LITERAL=104
    IDENTIFIER=105
    PHYSICAL_LITERAL=106
    OPEN_BRACKET=107
    CLOSE_BRACKET=108
    LINEJOINER=109
    NEWLINE=110
    WS=111
    COMMENT=112
    INDENT=113
    DEDENT=114

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class Osc_fileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(openscenario2Parser.EOF, 0)

        def prelude_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Prelude_statementContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Prelude_statementContext,i)


        def main_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Main_statementContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Main_statementContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_osc_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOsc_file" ):
                listener.enterOsc_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOsc_file" ):
                listener.exitOsc_file(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOsc_file" ):
                return visitor.visitOsc_file(self)
            else:
                return visitor.visitChildren(self)




    def osc_file(self):

        localctx = openscenario2Parser.Osc_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_osc_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__0:
                self.state = 294
                self.prelude_statement()
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 303
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44))) != 0):
                self.state = 300
                self.main_statement()
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 306
            self.match(openscenario2Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prelude_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_statement(self):
            return self.getTypedRuleContext(openscenario2Parser.Import_statementContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_prelude_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrelude_statement" ):
                listener.enterPrelude_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrelude_statement" ):
                listener.exitPrelude_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrelude_statement" ):
                return visitor.visitPrelude_statement(self)
            else:
                return visitor.visitChildren(self)




    def prelude_statement(self):

        localctx = openscenario2Parser.Prelude_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_prelude_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.import_statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Import_referenceContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_import_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_statement" ):
                listener.enterImport_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_statement" ):
                listener.exitImport_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_statement" ):
                return visitor.visitImport_statement(self)
            else:
                return visitor.visitChildren(self)




    def import_statement(self):

        localctx = openscenario2Parser.Import_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_import_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(openscenario2Parser.T__0)
            self.state = 311
            self.import_reference()
            self.state = 312
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Import_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def string_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.String_literalContext,0)


        def structured_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Structured_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_import_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_reference" ):
                listener.enterImport_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_reference" ):
                listener.exitImport_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_reference" ):
                return visitor.visitImport_reference(self)
            else:
                return visitor.visitChildren(self)




    def import_reference(self):

        localctx = openscenario2Parser.Import_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_import_reference)
        try:
            self.state = 316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 314
                self.string_literal()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 315
                self.structured_identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structured_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_structured_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructured_identifier" ):
                listener.enterStructured_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructured_identifier" ):
                listener.exitStructured_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructured_identifier" ):
                return visitor.visitStructured_identifier(self)
            else:
                return visitor.visitChildren(self)




    def structured_identifier(self):

        localctx = openscenario2Parser.Structured_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_structured_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 318
                    self.identifier()
                    self.state = 319
                    self.match(openscenario2Parser.T__1) 
                self.state = 325
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 326
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_statement(self):
            return self.getTypedRuleContext(openscenario2Parser.Namespace_statementContext,0)


        def export_statement(self):
            return self.getTypedRuleContext(openscenario2Parser.Export_statementContext,0)


        def osc_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Osc_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_main_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_statement" ):
                listener.enterMain_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_statement" ):
                listener.exitMain_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMain_statement" ):
                return visitor.visitMain_statement(self)
            else:
                return visitor.visitChildren(self)




    def main_statement(self):

        localctx = openscenario2Parser.Main_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_main_statement)
        try:
            self.state = 331
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__2]:
                self.enterOuterAlt(localctx, 1)
                self.state = 328
                self.namespace_statement()
                pass
            elif token in [openscenario2Parser.T__6]:
                self.enterOuterAlt(localctx, 2)
                self.state = 329
                self.export_statement()
                pass
            elif token in [openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 330
                self.osc_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Namespace_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def namespace_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Namespace_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_namespace_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_statement" ):
                listener.enterNamespace_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_statement" ):
                listener.exitNamespace_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace_statement" ):
                return visitor.visitNamespace_statement(self)
            else:
                return visitor.visitChildren(self)




    def namespace_statement(self):

        localctx = openscenario2Parser.Namespace_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_namespace_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(openscenario2Parser.T__2)
            self.state = 334
            self.namespace_name()
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__3:
                self.state = 335
                self.match(openscenario2Parser.T__3)
                self.state = 336
                self.namespace_list()


            self.state = 339
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Namespace_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Namespace_nameContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_namespace_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_list" ):
                listener.enterNamespace_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_list" ):
                listener.exitNamespace_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace_list" ):
                return visitor.visitNamespace_list(self)
            else:
                return visitor.visitChildren(self)




    def namespace_list(self):

        localctx = openscenario2Parser.Namespace_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_namespace_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.namespace_name()
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__4:
                self.state = 342
                self.match(openscenario2Parser.T__4)
                self.state = 343
                self.namespace_name()
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Namespace_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def global_namespace_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Global_namespace_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_namespace_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespace_name" ):
                listener.enterNamespace_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespace_name" ):
                listener.exitNamespace_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespace_name" ):
                return visitor.visitNamespace_name(self)
            else:
                return visitor.visitChildren(self)




    def namespace_name(self):

        localctx = openscenario2Parser.Namespace_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_namespace_name)
        try:
            self.state = 351
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 349
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 350
                self.global_namespace_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_namespace_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_global_namespace_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_namespace_name" ):
                listener.enterGlobal_namespace_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_namespace_name" ):
                listener.exitGlobal_namespace_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_namespace_name" ):
                return visitor.visitGlobal_namespace_name(self)
            else:
                return visitor.visitChildren(self)




    def global_namespace_name(self):

        localctx = openscenario2Parser.Global_namespace_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_global_namespace_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 353
            self.match(openscenario2Parser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Export_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def export_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Export_specificationContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Export_specificationContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_export_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExport_statement" ):
                listener.enterExport_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExport_statement" ):
                listener.exitExport_statement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExport_statement" ):
                return visitor.visitExport_statement(self)
            else:
                return visitor.visitChildren(self)




    def export_statement(self):

        localctx = openscenario2Parser.Export_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_export_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self.match(openscenario2Parser.T__6)
            self.state = 356
            self.export_specification()
            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__4:
                self.state = 357
                self.match(openscenario2Parser.T__4)
                self.state = 358
                self.export_specification()
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 364
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Export_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def export_wildcard_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Export_wildcard_specificationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_export_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExport_specification" ):
                listener.enterExport_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExport_specification" ):
                listener.exitExport_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExport_specification" ):
                return visitor.visitExport_specification(self)
            else:
                return visitor.visitChildren(self)




    def export_specification(self):

        localctx = openscenario2Parser.Export_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_export_specification)
        try:
            self.state = 368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 366
                self.qualified_identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 367
                self.export_wildcard_specification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Export_wildcard_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespace_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Namespace_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_export_wildcard_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExport_wildcard_specification" ):
                listener.enterExport_wildcard_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExport_wildcard_specification" ):
                listener.exitExport_wildcard_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExport_wildcard_specification" ):
                return visitor.visitExport_wildcard_specification(self)
            else:
                return visitor.visitChildren(self)




    def export_wildcard_specification(self):

        localctx = openscenario2Parser.Export_wildcard_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_export_wildcard_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)))) != 0):
                self.state = 371
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)))) != 0):
                    self.state = 370
                    self.namespace_name()


                self.state = 373
                self.match(openscenario2Parser.T__7)


            self.state = 376
            self.match(openscenario2Parser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Osc_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def physical_type_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Physical_type_declarationContext,0)


        def unit_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Unit_declarationContext,0)


        def enum_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_declarationContext,0)


        def struct_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Struct_declarationContext,0)


        def actor_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_declarationContext,0)


        def action_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Action_declarationContext,0)


        def scenario_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Scenario_declarationContext,0)


        def modifier_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_declarationContext,0)


        def type_extension(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_extensionContext,0)


        def global_parameter_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Global_parameter_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_osc_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOsc_declaration" ):
                listener.enterOsc_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOsc_declaration" ):
                listener.exitOsc_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOsc_declaration" ):
                return visitor.visitOsc_declaration(self)
            else:
                return visitor.visitChildren(self)




    def osc_declaration(self):

        localctx = openscenario2Parser.Osc_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_osc_declaration)
        try:
            self.state = 388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 378
                self.physical_type_declaration()
                pass
            elif token in [openscenario2Parser.T__18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 379
                self.unit_declaration()
                pass
            elif token in [openscenario2Parser.T__33]:
                self.enterOuterAlt(localctx, 3)
                self.state = 380
                self.enum_declaration()
                pass
            elif token in [openscenario2Parser.T__36]:
                self.enterOuterAlt(localctx, 4)
                self.state = 381
                self.struct_declaration()
                pass
            elif token in [openscenario2Parser.T__39]:
                self.enterOuterAlt(localctx, 5)
                self.state = 382
                self.actor_declaration()
                pass
            elif token in [openscenario2Parser.T__41]:
                self.enterOuterAlt(localctx, 6)
                self.state = 383
                self.action_declaration()
                pass
            elif token in [openscenario2Parser.T__40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 384
                self.scenario_declaration()
                pass
            elif token in [openscenario2Parser.T__42]:
                self.enterOuterAlt(localctx, 8)
                self.state = 385
                self.modifier_declaration()
                pass
            elif token in [openscenario2Parser.T__44]:
                self.enterOuterAlt(localctx, 9)
                self.state = 386
                self.type_extension()
                pass
            elif token in [openscenario2Parser.T__43]:
                self.enterOuterAlt(localctx, 10)
                self.state = 387
                self.global_parameter_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_aggregate_type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Non_aggregate_type_declaratorContext,0)


        def aggregate_type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Aggregate_type_declaratorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_declarator" ):
                listener.enterType_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_declarator" ):
                listener.exitType_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_declarator" ):
                return visitor.visitType_declarator(self)
            else:
                return visitor.visitChildren(self)




    def type_declarator(self):

        localctx = openscenario2Parser.Type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_type_declarator)
        try:
            self.state = 392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__11, openscenario2Parser.T__12, openscenario2Parser.T__13, openscenario2Parser.T__14, openscenario2Parser.T__15, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self.non_aggregate_type_declarator()
                pass
            elif token in [openscenario2Parser.T__9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.aggregate_type_declarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_aggregate_type_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primitive_type(self):
            return self.getTypedRuleContext(openscenario2Parser.Primitive_typeContext,0)


        def declared_type_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Declared_type_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_non_aggregate_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_aggregate_type_declarator" ):
                listener.enterNon_aggregate_type_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_aggregate_type_declarator" ):
                listener.exitNon_aggregate_type_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNon_aggregate_type_declarator" ):
                return visitor.visitNon_aggregate_type_declarator(self)
            else:
                return visitor.visitChildren(self)




    def non_aggregate_type_declarator(self):

        localctx = openscenario2Parser.Non_aggregate_type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_non_aggregate_type_declarator)
        try:
            self.state = 396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__11, openscenario2Parser.T__12, openscenario2Parser.T__13, openscenario2Parser.T__14, openscenario2Parser.T__15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.primitive_type()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 395
                self.declared_type_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Declared_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_declared_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclared_type_name" ):
                listener.enterDeclared_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclared_type_name" ):
                listener.exitDeclared_type_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclared_type_name" ):
                return visitor.visitDeclared_type_name(self)
            else:
                return visitor.visitChildren(self)




    def declared_type_name(self):

        localctx = openscenario2Parser.Declared_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_declared_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Aggregate_type_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def list_type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.List_type_declaratorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_aggregate_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_type_declarator" ):
                listener.enterAggregate_type_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_type_declarator" ):
                listener.exitAggregate_type_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_type_declarator" ):
                return visitor.visitAggregate_type_declarator(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_type_declarator(self):

        localctx = openscenario2Parser.Aggregate_type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_aggregate_type_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.list_type_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_type_declaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def non_aggregate_type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Non_aggregate_type_declaratorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_list_type_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_type_declarator" ):
                listener.enterList_type_declarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_type_declarator" ):
                listener.exitList_type_declarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_type_declarator" ):
                return visitor.visitList_type_declarator(self)
            else:
                return visitor.visitChildren(self)




    def list_type_declarator(self):

        localctx = openscenario2Parser.List_type_declaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_list_type_declarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 402
            self.match(openscenario2Parser.T__9)
            self.state = 403
            self.match(openscenario2Parser.T__10)
            self.state = 404
            self.non_aggregate_type_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primitive_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_primitive_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimitive_type" ):
                listener.enterPrimitive_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimitive_type" ):
                listener.exitPrimitive_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitive_type" ):
                return visitor.visitPrimitive_type(self)
            else:
                return visitor.visitChildren(self)




    def primitive_type(self):

        localctx = openscenario2Parser.Primitive_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_primitive_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__11) | (1 << openscenario2Parser.T__12) | (1 << openscenario2Parser.T__13) | (1 << openscenario2Parser.T__14) | (1 << openscenario2Parser.T__15))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Physical_type_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declared_type_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Declared_type_nameContext,0)


        def base_unit_specifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Base_unit_specifierContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_physical_type_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhysical_type_declaration" ):
                listener.enterPhysical_type_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhysical_type_declaration" ):
                listener.exitPhysical_type_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhysical_type_declaration" ):
                return visitor.visitPhysical_type_declaration(self)
            else:
                return visitor.visitChildren(self)




    def physical_type_declaration(self):

        localctx = openscenario2Parser.Physical_type_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_physical_type_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(openscenario2Parser.T__16)
            self.state = 409
            self.declared_type_name()
            self.state = 410
            self.match(openscenario2Parser.T__17)
            self.state = 411
            self.base_unit_specifier()
            self.state = 412
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unit_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Unit_nameContext,0)


        def declared_type_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Declared_type_nameContext,0)


        def unit_specifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Unit_specifierContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_unit_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_declaration" ):
                listener.enterUnit_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_declaration" ):
                listener.exitUnit_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_declaration" ):
                return visitor.visitUnit_declaration(self)
            else:
                return visitor.visitChildren(self)




    def unit_declaration(self):

        localctx = openscenario2Parser.Unit_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unit_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(openscenario2Parser.T__18)
            self.state = 415
            self.unit_name()
            self.state = 416
            self.match(openscenario2Parser.T__10)
            self.state = 417
            self.declared_type_name()
            self.state = 418
            self.match(openscenario2Parser.T__17)
            self.state = 419
            self.unit_specifier()
            self.state = 420
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_unit_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_unit_specifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_unit_specifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_base_unit_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_unit_specifier" ):
                listener.enterBase_unit_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_unit_specifier" ):
                listener.exitBase_unit_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_unit_specifier" ):
                return visitor.visitBase_unit_specifier(self)
            else:
                return visitor.visitChildren(self)




    def base_unit_specifier(self):

        localctx = openscenario2Parser.Base_unit_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_base_unit_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.si_base_unit_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_unit_specifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_unit_specifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_unit_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_specifier" ):
                listener.enterUnit_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_specifier" ):
                listener.exitUnit_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_specifier" ):
                return visitor.visitUnit_specifier(self)
            else:
                return visitor.visitChildren(self)




    def unit_specifier(self):

        localctx = openscenario2Parser.Unit_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_unit_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.si_unit_specifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_base_unit_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_exponent_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_exponent_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_base_unit_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_base_unit_specifier" ):
                listener.enterSi_base_unit_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_base_unit_specifier" ):
                listener.exitSi_base_unit_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_base_unit_specifier" ):
                return visitor.visitSi_base_unit_specifier(self)
            else:
                return visitor.visitChildren(self)




    def si_base_unit_specifier(self):

        localctx = openscenario2Parser.Si_base_unit_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_si_base_unit_specifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(openscenario2Parser.T__19)
            self.state = 427
            self.match(openscenario2Parser.T__20)
            self.state = 428
            self.si_base_exponent_list()
            self.state = 429
            self.match(openscenario2Parser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_base_exponent_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_exponent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Si_base_exponentContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Si_base_exponentContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_base_exponent_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_base_exponent_list" ):
                listener.enterSi_base_exponent_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_base_exponent_list" ):
                listener.exitSi_base_exponent_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_base_exponent_list" ):
                return visitor.visitSi_base_exponent_list(self)
            else:
                return visitor.visitChildren(self)




    def si_base_exponent_list(self):

        localctx = openscenario2Parser.Si_base_exponent_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_si_base_exponent_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.si_base_exponent()
            self.state = 436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 432
                    self.match(openscenario2Parser.T__4)
                    self.state = 433
                    self.si_base_exponent() 
                self.state = 438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_base_exponentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_unit_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_unit_nameContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Integer_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_base_exponent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_base_exponent" ):
                listener.enterSi_base_exponent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_base_exponent" ):
                listener.exitSi_base_exponent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_base_exponent" ):
                return visitor.visitSi_base_exponent(self)
            else:
                return visitor.visitChildren(self)




    def si_base_exponent(self):

        localctx = openscenario2Parser.Si_base_exponentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_si_base_exponent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 439
            self.si_base_unit_name()
            self.state = 440
            self.match(openscenario2Parser.T__22)
            self.state = 441
            self.integer_literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_unit_specifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def si_base_exponent_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_exponent_listContext,0)


        def si_factor(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_factorContext,0)


        def si_offset(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_offsetContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_unit_specifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_unit_specifier" ):
                listener.enterSi_unit_specifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_unit_specifier" ):
                listener.exitSi_unit_specifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_unit_specifier" ):
                return visitor.visitSi_unit_specifier(self)
            else:
                return visitor.visitChildren(self)




    def si_unit_specifier(self):

        localctx = openscenario2Parser.Si_unit_specifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_si_unit_specifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(openscenario2Parser.T__19)
            self.state = 444
            self.match(openscenario2Parser.T__20)
            self.state = 445
            self.si_base_exponent_list()
            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 446
                self.match(openscenario2Parser.T__4)
                self.state = 447
                self.si_factor()


            self.state = 452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__4:
                self.state = 450
                self.match(openscenario2Parser.T__4)
                self.state = 451
                self.si_offset()


            self.state = 454
            self.match(openscenario2Parser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Float_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Integer_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_factor" ):
                listener.enterSi_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_factor" ):
                listener.exitSi_factor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_factor" ):
                return visitor.visitSi_factor(self)
            else:
                return visitor.visitChildren(self)




    def si_factor(self):

        localctx = openscenario2Parser.Si_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_si_factor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.match(openscenario2Parser.T__23)
            self.state = 457
            self.match(openscenario2Parser.T__22)
            self.state = 460
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.FLOAT_LITERAL]:
                self.state = 458
                self.float_literal()
                pass
            elif token in [openscenario2Parser.INTEGER_LITERAL]:
                self.state = 459
                self.integer_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_offsetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def float_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Float_literalContext,0)


        def integer_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Integer_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_offset" ):
                listener.enterSi_offset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_offset" ):
                listener.exitSi_offset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_offset" ):
                return visitor.visitSi_offset(self)
            else:
                return visitor.visitChildren(self)




    def si_offset(self):

        localctx = openscenario2Parser.Si_offsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_si_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(openscenario2Parser.T__24)
            self.state = 463
            self.match(openscenario2Parser.T__22)
            self.state = 466
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.FLOAT_LITERAL]:
                self.state = 464
                self.float_literal()
                pass
            elif token in [openscenario2Parser.INTEGER_LITERAL]:
                self.state = 465
                self.integer_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Si_base_unit_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_si_base_unit_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSi_base_unit_name" ):
                listener.enterSi_base_unit_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSi_base_unit_name" ):
                listener.exitSi_base_unit_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSi_base_unit_name" ):
                return visitor.visitSi_base_unit_name(self)
            else:
                return visitor.visitChildren(self)




    def si_base_unit_name(self):

        localctx = openscenario2Parser.Si_base_unit_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_si_base_unit_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_nameContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(openscenario2Parser.OPEN_BRACKET, 0)

        def enum_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Enum_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Enum_member_declContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(openscenario2Parser.CLOSE_BRACKET, 0)

        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_declaration" ):
                listener.enterEnum_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_declaration" ):
                listener.exitEnum_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_declaration" ):
                return visitor.visitEnum_declaration(self)
            else:
                return visitor.visitChildren(self)




    def enum_declaration(self):

        localctx = openscenario2Parser.Enum_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_enum_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.match(openscenario2Parser.T__33)
            self.state = 471
            self.enum_name()
            self.state = 472
            self.match(openscenario2Parser.T__22)
            self.state = 473
            self.match(openscenario2Parser.OPEN_BRACKET)
            self.state = 474
            self.enum_member_decl()
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__4:
                self.state = 475
                self.match(openscenario2Parser.T__4)
                self.state = 476
                self.enum_member_decl()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 482
            self.match(openscenario2Parser.CLOSE_BRACKET)
            self.state = 483
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_member_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_member_nameContext,0)


        def enum_member_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_member_valueContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_decl" ):
                listener.enterEnum_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_decl" ):
                listener.exitEnum_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_member_decl" ):
                return visitor.visitEnum_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def enum_member_decl(self):

        localctx = openscenario2Parser.Enum_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_enum_member_decl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 485
            self.enum_member_name()
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__34:
                self.state = 486
                self.match(openscenario2Parser.T__34)
                self.state = 487
                self.enum_member_value()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_name" ):
                listener.enterEnum_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_name" ):
                listener.exitEnum_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_name" ):
                return visitor.visitEnum_name(self)
            else:
                return visitor.visitChildren(self)




    def enum_name(self):

        localctx = openscenario2Parser.Enum_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_enum_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_member_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_name" ):
                listener.enterEnum_member_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_name" ):
                listener.exitEnum_member_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_member_name" ):
                return visitor.visitEnum_member_name(self)
            else:
                return visitor.visitChildren(self)




    def enum_member_name(self):

        localctx = openscenario2Parser.Enum_member_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_enum_member_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_member_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uint_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Uint_literalContext,0)


        def hex_uint_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Hex_uint_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_member_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_member_value" ):
                listener.enterEnum_member_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_member_value" ):
                listener.exitEnum_member_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_member_value" ):
                return visitor.visitEnum_member_value(self)
            else:
                return visitor.visitChildren(self)




    def enum_member_value(self):

        localctx = openscenario2Parser.Enum_member_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_enum_member_value)
        try:
            self.state = 496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.UINT_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 494
                self.uint_literal()
                pass
            elif token in [openscenario2Parser.HEX_UINT_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.hex_uint_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_value_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_member_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_member_nameContext,0)


        def enum_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_value_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_value_reference" ):
                listener.enterEnum_value_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_value_reference" ):
                listener.exitEnum_value_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_value_reference" ):
                return visitor.visitEnum_value_reference(self)
            else:
                return visitor.visitChildren(self)




    def enum_value_reference(self):

        localctx = openscenario2Parser.Enum_value_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_enum_value_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 498
                self.enum_name()
                self.state = 499
                self.match(openscenario2Parser.T__35)


            self.state = 503
            self.enum_member_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Struct_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Struct_nameContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def struct_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Struct_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Struct_member_declContext,i)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_struct_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_declaration" ):
                listener.enterStruct_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_declaration" ):
                listener.exitStruct_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_declaration" ):
                return visitor.visitStruct_declaration(self)
            else:
                return visitor.visitChildren(self)




    def struct_declaration(self):

        localctx = openscenario2Parser.Struct_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_struct_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(openscenario2Parser.T__36)
            self.state = 506
            self.struct_name()
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__37:
                self.state = 507
                self.match(openscenario2Parser.T__37)
                self.state = 508
                self.struct_name()
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__20:
                    self.state = 509
                    self.match(openscenario2Parser.T__20)
                    self.state = 510
                    self.field_name()
                    self.state = 511
                    self.match(openscenario2Parser.T__38)
                    self.state = 514
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.IDENTIFIER]:
                        self.state = 512
                        self.enum_value_reference()
                        pass
                    elif token in [openscenario2Parser.BOOL_LITERAL]:
                        self.state = 513
                        self.bool_literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 516
                    self.match(openscenario2Parser.T__21)




            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__22]:
                self.state = 522
                self.match(openscenario2Parser.T__22)
                self.state = 523
                self.match(openscenario2Parser.INDENT)
                self.state = 525 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 524
                    self.struct_member_decl()
                    self.state = 527 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__59) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__66 - 64)) | (1 << (openscenario2Parser.T__67 - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)))) != 0)):
                        break

                self.state = 529
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 531
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_declarationContext,0)


        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_declarationContext,0)


        def coverage_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Coverage_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_struct_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_member_decl" ):
                listener.enterStruct_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_member_decl" ):
                listener.exitStruct_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_member_decl" ):
                return visitor.visitStruct_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def struct_member_decl(self):

        localctx = openscenario2Parser.Struct_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_struct_member_decl)
        try:
            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.event_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.field_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.constraint_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 537
                self.method_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 538
                self.coverage_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Struct_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_struct_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct_name" ):
                listener.enterStruct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct_name" ):
                listener.exitStruct_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct_name" ):
                return visitor.visitStruct_name(self)
            else:
                return visitor.visitChildren(self)




    def struct_name(self):

        localctx = openscenario2Parser.Struct_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_struct_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_name" ):
                listener.enterField_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_name" ):
                listener.exitField_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_name" ):
                return visitor.visitField_name(self)
            else:
                return visitor.visitChildren(self)




    def field_name(self):

        localctx = openscenario2Parser.Field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 543
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Actor_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def actor_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Actor_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Actor_nameContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def actor_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Actor_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Actor_member_declContext,i)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_actor_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActor_declaration" ):
                listener.enterActor_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActor_declaration" ):
                listener.exitActor_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActor_declaration" ):
                return visitor.visitActor_declaration(self)
            else:
                return visitor.visitChildren(self)




    def actor_declaration(self):

        localctx = openscenario2Parser.Actor_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_actor_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(openscenario2Parser.T__39)
            self.state = 546
            self.actor_name()
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__37:
                self.state = 547
                self.match(openscenario2Parser.T__37)
                self.state = 548
                self.actor_name()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__20:
                    self.state = 549
                    self.match(openscenario2Parser.T__20)
                    self.state = 550
                    self.field_name()
                    self.state = 551
                    self.match(openscenario2Parser.T__38)
                    self.state = 554
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.IDENTIFIER]:
                        self.state = 552
                        self.enum_value_reference()
                        pass
                    elif token in [openscenario2Parser.BOOL_LITERAL]:
                        self.state = 553
                        self.bool_literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 556
                    self.match(openscenario2Parser.T__21)




            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__22]:
                self.state = 562
                self.match(openscenario2Parser.T__22)
                self.state = 563
                self.match(openscenario2Parser.INDENT)
                self.state = 565 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 564
                    self.actor_member_decl()
                    self.state = 567 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__59) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__66 - 64)) | (1 << (openscenario2Parser.T__67 - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)))) != 0)):
                        break

                self.state = 569
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 571
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Actor_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_declarationContext,0)


        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_declarationContext,0)


        def coverage_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Coverage_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_actor_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActor_member_decl" ):
                listener.enterActor_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActor_member_decl" ):
                listener.exitActor_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActor_member_decl" ):
                return visitor.visitActor_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def actor_member_decl(self):

        localctx = openscenario2Parser.Actor_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_actor_member_decl)
        try:
            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.event_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.field_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.constraint_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 577
                self.method_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 578
                self.coverage_declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Actor_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_actor_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActor_name" ):
                listener.enterActor_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActor_name" ):
                listener.exitActor_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActor_name" ):
                return visitor.visitActor_name(self)
            else:
                return visitor.visitChildren(self)




    def actor_name(self):

        localctx = openscenario2Parser.Actor_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_actor_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scenario_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_behavior_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Qualified_behavior_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Qualified_behavior_nameContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def scenario_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Scenario_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Scenario_member_declContext,i)


        def behavior_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Behavior_specificationContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Behavior_specificationContext,i)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_scenario_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScenario_declaration" ):
                listener.enterScenario_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScenario_declaration" ):
                listener.exitScenario_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScenario_declaration" ):
                return visitor.visitScenario_declaration(self)
            else:
                return visitor.visitChildren(self)




    def scenario_declaration(self):

        localctx = openscenario2Parser.Scenario_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_scenario_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(openscenario2Parser.T__40)
            self.state = 584
            self.qualified_behavior_name()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__37:
                self.state = 585
                self.match(openscenario2Parser.T__37)
                self.state = 586
                self.qualified_behavior_name()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__20:
                    self.state = 587
                    self.match(openscenario2Parser.T__20)
                    self.state = 588
                    self.field_name()
                    self.state = 589
                    self.match(openscenario2Parser.T__38)
                    self.state = 592
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.IDENTIFIER]:
                        self.state = 590
                        self.enum_value_reference()
                        pass
                    elif token in [openscenario2Parser.BOOL_LITERAL]:
                        self.state = 591
                        self.bool_literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 594
                    self.match(openscenario2Parser.T__21)




            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__22]:
                self.state = 600
                self.match(openscenario2Parser.T__22)
                self.state = 601
                self.match(openscenario2Parser.INDENT)
                self.state = 604 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 604
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__53, openscenario2Parser.T__56, openscenario2Parser.T__59, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__66, openscenario2Parser.T__67, openscenario2Parser.T__81, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                        self.state = 602
                        self.scenario_member_decl()
                        pass
                    elif token in [openscenario2Parser.T__68, openscenario2Parser.T__69]:
                        self.state = 603
                        self.behavior_specification()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 606 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__59) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__66 - 64)) | (1 << (openscenario2Parser.T__67 - 64)) | (1 << (openscenario2Parser.T__68 - 64)) | (1 << (openscenario2Parser.T__69 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0)):
                        break

                self.state = 608
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 610
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Scenario_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_declarationContext,0)


        def field_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_declarationContext,0)


        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def method_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_declarationContext,0)


        def coverage_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Coverage_declarationContext,0)


        def modifier_application(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_applicationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_scenario_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScenario_member_decl" ):
                listener.enterScenario_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScenario_member_decl" ):
                listener.exitScenario_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScenario_member_decl" ):
                return visitor.visitScenario_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def scenario_member_decl(self):

        localctx = openscenario2Parser.Scenario_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_scenario_member_decl)
        try:
            self.state = 619
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 613
                self.event_declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 614
                self.field_declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 615
                self.constraint_declaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 616
                self.method_declaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 617
                self.coverage_declaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 618
                self.modifier_application()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_behavior_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def behavior_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_nameContext,0)


        def actor_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_qualified_behavior_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_behavior_name" ):
                listener.enterQualified_behavior_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_behavior_name" ):
                listener.exitQualified_behavior_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_behavior_name" ):
                return visitor.visitQualified_behavior_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_behavior_name(self):

        localctx = openscenario2Parser.Qualified_behavior_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_qualified_behavior_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 621
                self.actor_name()
                self.state = 622
                self.match(openscenario2Parser.T__1)


            self.state = 626
            self.behavior_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_name" ):
                listener.enterBehavior_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_name" ):
                listener.exitBehavior_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_name" ):
                return visitor.visitBehavior_name(self)
            else:
                return visitor.visitChildren(self)




    def behavior_name(self):

        localctx = openscenario2Parser.Behavior_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_behavior_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Action_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_behavior_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Qualified_behavior_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Qualified_behavior_nameContext,i)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def scenario_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Scenario_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Scenario_member_declContext,i)


        def behavior_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Behavior_specificationContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Behavior_specificationContext,i)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_action_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAction_declaration" ):
                listener.enterAction_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAction_declaration" ):
                listener.exitAction_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAction_declaration" ):
                return visitor.visitAction_declaration(self)
            else:
                return visitor.visitChildren(self)




    def action_declaration(self):

        localctx = openscenario2Parser.Action_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_action_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(openscenario2Parser.T__41)
            self.state = 631
            self.qualified_behavior_name()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__37:
                self.state = 632
                self.match(openscenario2Parser.T__37)
                self.state = 633
                self.qualified_behavior_name()
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__20:
                    self.state = 634
                    self.match(openscenario2Parser.T__20)
                    self.state = 635
                    self.field_name()
                    self.state = 636
                    self.match(openscenario2Parser.T__38)
                    self.state = 639
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.IDENTIFIER]:
                        self.state = 637
                        self.enum_value_reference()
                        pass
                    elif token in [openscenario2Parser.BOOL_LITERAL]:
                        self.state = 638
                        self.bool_literal()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 641
                    self.match(openscenario2Parser.T__21)




            self.state = 658
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__22]:
                self.state = 647
                self.match(openscenario2Parser.T__22)
                self.state = 648
                self.match(openscenario2Parser.INDENT)
                self.state = 651 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 651
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__53, openscenario2Parser.T__56, openscenario2Parser.T__59, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__66, openscenario2Parser.T__67, openscenario2Parser.T__81, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                        self.state = 649
                        self.scenario_member_decl()
                        pass
                    elif token in [openscenario2Parser.T__68, openscenario2Parser.T__69]:
                        self.state = 650
                        self.behavior_specification()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 653 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__59) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__66 - 64)) | (1 << (openscenario2Parser.T__67 - 64)) | (1 << (openscenario2Parser.T__68 - 64)) | (1 << (openscenario2Parser.T__69 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0)):
                        break

                self.state = 655
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 657
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def actor_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_nameContext,0)


        def qualified_behavior_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_behavior_nameContext,0)


        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def scenario_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Scenario_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Scenario_member_declContext,i)


        def on_directive(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.On_directiveContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.On_directiveContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_modifier_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_declaration" ):
                listener.enterModifier_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_declaration" ):
                listener.exitModifier_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_declaration" ):
                return visitor.visitModifier_declaration(self)
            else:
                return visitor.visitChildren(self)




    def modifier_declaration(self):

        localctx = openscenario2Parser.Modifier_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_modifier_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(openscenario2Parser.T__42)
            self.state = 664
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
            if la_ == 1:
                self.state = 661
                self.actor_name()
                self.state = 662
                self.match(openscenario2Parser.T__1)


            self.state = 666
            self.modifier_name()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__10:
                self.state = 667
                self.match(openscenario2Parser.T__10)
                self.state = 668
                self.qualified_behavior_name()


            self.state = 682
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__22]:
                self.state = 671
                self.match(openscenario2Parser.T__22)
                self.state = 672
                self.match(openscenario2Parser.INDENT)
                self.state = 675 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 675
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__53, openscenario2Parser.T__56, openscenario2Parser.T__59, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__66, openscenario2Parser.T__67, openscenario2Parser.T__81, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                        self.state = 673
                        self.scenario_member_decl()
                        pass
                    elif token in [openscenario2Parser.T__68]:
                        self.state = 674
                        self.on_directive()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 677 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__59) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__66 - 64)) | (1 << (openscenario2Parser.T__67 - 64)) | (1 << (openscenario2Parser.T__68 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0)):
                        break

                self.state = 679
                self.match(openscenario2Parser.DEDENT)
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 681
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_modifier_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_name" ):
                listener.enterModifier_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_name" ):
                listener.exitModifier_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_name" ):
                return visitor.visitModifier_name(self)
            else:
                return visitor.visitChildren(self)




    def modifier_name(self):

        localctx = openscenario2Parser.Modifier_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_modifier_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Global_parameter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Parameter_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_global_parameter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_parameter_declaration" ):
                listener.enterGlobal_parameter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_parameter_declaration" ):
                listener.exitGlobal_parameter_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_parameter_declaration" ):
                return visitor.visitGlobal_parameter_declaration(self)
            else:
                return visitor.visitChildren(self)




    def global_parameter_declaration(self):

        localctx = openscenario2Parser.Global_parameter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_global_parameter_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(openscenario2Parser.T__43)
            self.state = 687
            self.parameter_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_extensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_type_extension(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_type_extensionContext,0)


        def structured_type_extension(self):
            return self.getTypedRuleContext(openscenario2Parser.Structured_type_extensionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_type_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_extension" ):
                listener.enterType_extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_extension" ):
                listener.exitType_extension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_extension" ):
                return visitor.visitType_extension(self)
            else:
                return visitor.visitChildren(self)




    def type_extension(self):

        localctx = openscenario2Parser.Type_extensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_type_extension)
        try:
            self.state = 691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.enum_type_extension()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.structured_type_extension()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Enum_type_extensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enum_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_nameContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(openscenario2Parser.OPEN_BRACKET, 0)

        def enum_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Enum_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Enum_member_declContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(openscenario2Parser.CLOSE_BRACKET, 0)

        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_enum_type_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnum_type_extension" ):
                listener.enterEnum_type_extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnum_type_extension" ):
                listener.exitEnum_type_extension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnum_type_extension" ):
                return visitor.visitEnum_type_extension(self)
            else:
                return visitor.visitChildren(self)




    def enum_type_extension(self):

        localctx = openscenario2Parser.Enum_type_extensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_enum_type_extension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(openscenario2Parser.T__44)
            self.state = 694
            self.enum_name()
            self.state = 695
            self.match(openscenario2Parser.T__22)
            self.state = 696
            self.match(openscenario2Parser.OPEN_BRACKET)
            self.state = 697
            self.enum_member_decl()
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__4:
                self.state = 698
                self.match(openscenario2Parser.T__4)
                self.state = 699
                self.enum_member_decl()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 705
            self.match(openscenario2Parser.CLOSE_BRACKET)
            self.state = 706
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Structured_type_extensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extendable_type_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Extendable_type_nameContext,0)


        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def extension_member_decl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Extension_member_declContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Extension_member_declContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_structured_type_extension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructured_type_extension" ):
                listener.enterStructured_type_extension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructured_type_extension" ):
                listener.exitStructured_type_extension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructured_type_extension" ):
                return visitor.visitStructured_type_extension(self)
            else:
                return visitor.visitChildren(self)




    def structured_type_extension(self):

        localctx = openscenario2Parser.Structured_type_extensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_structured_type_extension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 708
            self.match(openscenario2Parser.T__44)
            self.state = 709
            self.extendable_type_name()
            self.state = 710
            self.match(openscenario2Parser.T__22)
            self.state = 711
            self.match(openscenario2Parser.INDENT)
            self.state = 713 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 712
                self.extension_member_decl()
                self.state = 715 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__53) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__59) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__66 - 64)) | (1 << (openscenario2Parser.T__67 - 64)) | (1 << (openscenario2Parser.T__68 - 64)) | (1 << (openscenario2Parser.T__69 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0)):
                    break

            self.state = 717
            self.match(openscenario2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extendable_type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Struct_nameContext,0)


        def actor_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_nameContext,0)


        def qualified_behavior_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_behavior_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_extendable_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendable_type_name" ):
                listener.enterExtendable_type_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendable_type_name" ):
                listener.exitExtendable_type_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendable_type_name" ):
                return visitor.visitExtendable_type_name(self)
            else:
                return visitor.visitChildren(self)




    def extendable_type_name(self):

        localctx = openscenario2Parser.Extendable_type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_extendable_type_name)
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                self.struct_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 720
                self.actor_name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 721
                self.qualified_behavior_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Extension_member_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def struct_member_decl(self):
            return self.getTypedRuleContext(openscenario2Parser.Struct_member_declContext,0)


        def actor_member_decl(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_member_declContext,0)


        def scenario_member_decl(self):
            return self.getTypedRuleContext(openscenario2Parser.Scenario_member_declContext,0)


        def behavior_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_specificationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_extension_member_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtension_member_decl" ):
                listener.enterExtension_member_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtension_member_decl" ):
                listener.exitExtension_member_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtension_member_decl" ):
                return visitor.visitExtension_member_decl(self)
            else:
                return visitor.visitChildren(self)




    def extension_member_decl(self):

        localctx = openscenario2Parser.Extension_member_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_extension_member_decl)
        try:
            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.struct_member_decl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 725
                self.actor_member_decl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 726
                self.scenario_member_decl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 727
                self.behavior_specification()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def argument_list_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_list_specificationContext,0)


        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_declaration" ):
                listener.enterEvent_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_declaration" ):
                listener.exitEvent_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_declaration" ):
                return visitor.visitEvent_declaration(self)
            else:
                return visitor.visitChildren(self)




    def event_declaration(self):

        localctx = openscenario2Parser.Event_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_event_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(openscenario2Parser.T__45)
            self.state = 731
            self.event_name()
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__20:
                self.state = 732
                self.match(openscenario2Parser.T__20)
                self.state = 733
                self.argument_list_specification()
                self.state = 734
                self.match(openscenario2Parser.T__21)


            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__17:
                self.state = 738
                self.match(openscenario2Parser.T__17)
                self.state = 739
                self.event_specification()


            self.state = 742
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_referenceContext,0)


        def event_condition(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_conditionContext,0)


        def event_field_decl(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_field_declContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_specification" ):
                listener.enterEvent_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_specification" ):
                listener.exitEvent_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_specification" ):
                return visitor.visitEvent_specification(self)
            else:
                return visitor.visitChildren(self)




    def event_specification(self):

        localctx = openscenario2Parser.Event_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_event_specification)
        self._la = 0 # Token type
        try:
            self.state = 753
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.event_reference()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==openscenario2Parser.T__46 or _la==openscenario2Parser.T__48:
                    self.state = 746
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==openscenario2Parser.T__48:
                        self.state = 745
                        self.event_field_decl()


                    self.state = 748
                    self.match(openscenario2Parser.T__46)
                    self.state = 749
                    self.event_condition()


                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__49, openscenario2Parser.T__50, openscenario2Parser.T__51, openscenario2Parser.T__52, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__81, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.event_condition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_path(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_pathContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_reference" ):
                listener.enterEvent_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_reference" ):
                listener.exitEvent_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_reference" ):
                return visitor.visitEvent_reference(self)
            else:
                return visitor.visitChildren(self)




    def event_reference(self):

        localctx = openscenario2Parser.Event_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_event_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.match(openscenario2Parser.T__47)
            self.state = 756
            self.event_path()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_field_declContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_field_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_field_decl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_field_decl" ):
                listener.enterEvent_field_decl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_field_decl" ):
                listener.exitEvent_field_decl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_field_decl" ):
                return visitor.visitEvent_field_decl(self)
            else:
                return visitor.visitChildren(self)




    def event_field_decl(self):

        localctx = openscenario2Parser.Event_field_declContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_event_field_decl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(openscenario2Parser.T__48)
            self.state = 759
            self.event_field_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_field_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_field_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_field_name" ):
                listener.enterEvent_field_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_field_name" ):
                listener.exitEvent_field_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_field_name" ):
                return visitor.visitEvent_field_name(self)
            else:
                return visitor.visitChildren(self)




    def event_field_name(self):

        localctx = openscenario2Parser.Event_field_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_event_field_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_name" ):
                listener.enterEvent_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_name" ):
                listener.exitEvent_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_name" ):
                return visitor.visitEvent_name(self)
            else:
                return visitor.visitChildren(self)




    def event_name(self):

        localctx = openscenario2Parser.Event_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_event_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_pathContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_path" ):
                listener.enterEvent_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_path" ):
                listener.exitEvent_path(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_path" ):
                return visitor.visitEvent_path(self)
            else:
                return visitor.visitChildren(self)




    def event_path(self):

        localctx = openscenario2Parser.Event_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_event_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 765
                self.expression()
                self.state = 766
                self.match(openscenario2Parser.T__1)


            self.state = 770
            self.event_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Event_conditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_expressionContext,0)


        def rise_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Rise_expressionContext,0)


        def fall_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Fall_expressionContext,0)


        def elapsed_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Elapsed_expressionContext,0)


        def every_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Every_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_event_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvent_condition" ):
                listener.enterEvent_condition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvent_condition" ):
                listener.exitEvent_condition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvent_condition" ):
                return visitor.visitEvent_condition(self)
            else:
                return visitor.visitChildren(self)




    def event_condition(self):

        localctx = openscenario2Parser.Event_conditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_event_condition)
        try:
            self.state = 777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__81, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 772
                self.bool_expression()
                pass
            elif token in [openscenario2Parser.T__49]:
                self.enterOuterAlt(localctx, 2)
                self.state = 773
                self.rise_expression()
                pass
            elif token in [openscenario2Parser.T__50]:
                self.enterOuterAlt(localctx, 3)
                self.state = 774
                self.fall_expression()
                pass
            elif token in [openscenario2Parser.T__51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 775
                self.elapsed_expression()
                pass
            elif token in [openscenario2Parser.T__52]:
                self.enterOuterAlt(localctx, 5)
                self.state = 776
                self.every_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rise_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_rise_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRise_expression" ):
                listener.enterRise_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRise_expression" ):
                listener.exitRise_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRise_expression" ):
                return visitor.visitRise_expression(self)
            else:
                return visitor.visitChildren(self)




    def rise_expression(self):

        localctx = openscenario2Parser.Rise_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_rise_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(openscenario2Parser.T__49)
            self.state = 780
            self.match(openscenario2Parser.T__20)
            self.state = 781
            self.bool_expression()
            self.state = 782
            self.match(openscenario2Parser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Fall_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bool_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_fall_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFall_expression" ):
                listener.enterFall_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFall_expression" ):
                listener.exitFall_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFall_expression" ):
                return visitor.visitFall_expression(self)
            else:
                return visitor.visitChildren(self)




    def fall_expression(self):

        localctx = openscenario2Parser.Fall_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fall_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(openscenario2Parser.T__50)
            self.state = 785
            self.match(openscenario2Parser.T__20)
            self.state = 786
            self.bool_expression()
            self.state = 787
            self.match(openscenario2Parser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Elapsed_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def duration_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Duration_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_elapsed_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElapsed_expression" ):
                listener.enterElapsed_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElapsed_expression" ):
                listener.exitElapsed_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElapsed_expression" ):
                return visitor.visitElapsed_expression(self)
            else:
                return visitor.visitChildren(self)




    def elapsed_expression(self):

        localctx = openscenario2Parser.Elapsed_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_elapsed_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(openscenario2Parser.T__51)
            self.state = 790
            self.match(openscenario2Parser.T__20)
            self.state = 791
            self.duration_expression()
            self.state = 792
            self.match(openscenario2Parser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Every_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def duration_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Duration_expressionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Duration_expressionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_every_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvery_expression" ):
                listener.enterEvery_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvery_expression" ):
                listener.exitEvery_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvery_expression" ):
                return visitor.visitEvery_expression(self)
            else:
                return visitor.visitChildren(self)




    def every_expression(self):

        localctx = openscenario2Parser.Every_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_every_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.match(openscenario2Parser.T__52)
            self.state = 795
            self.match(openscenario2Parser.T__20)
            self.state = 796
            self.duration_expression()
            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__4:
                self.state = 797
                self.match(openscenario2Parser.T__4)
                self.state = 798
                self.match(openscenario2Parser.T__24)
                self.state = 799
                self.match(openscenario2Parser.T__22)
                self.state = 800
                self.duration_expression()


            self.state = 803
            self.match(openscenario2Parser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bool_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_bool_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_expression" ):
                listener.enterBool_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_expression" ):
                listener.exitBool_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_expression" ):
                return visitor.visitBool_expression(self)
            else:
                return visitor.visitChildren(self)




    def bool_expression(self):

        localctx = openscenario2Parser.Bool_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_bool_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Duration_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_duration_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDuration_expression" ):
                listener.enterDuration_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDuration_expression" ):
                listener.exitDuration_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDuration_expression" ):
                return visitor.visitDuration_expression(self)
            else:
                return visitor.visitChildren(self)




    def duration_expression(self):

        localctx = openscenario2Parser.Duration_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_duration_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Field_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Parameter_declarationContext,0)


        def variable_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Variable_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_field_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_declaration" ):
                listener.enterField_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_declaration" ):
                listener.exitField_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_declaration" ):
                return visitor.visitField_declaration(self)
            else:
                return visitor.visitChildren(self)




    def field_declaration(self):

        localctx = openscenario2Parser.Field_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_field_declaration)
        try:
            self.state = 811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 809
                self.parameter_declaration()
                pass
            elif token in [openscenario2Parser.T__53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.variable_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Field_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,i)


        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def parameter_with_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Parameter_with_declarationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def default_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Default_valueContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_parameter_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_declaration" ):
                listener.enterParameter_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_declaration" ):
                listener.exitParameter_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_declaration" ):
                return visitor.visitParameter_declaration(self)
            else:
                return visitor.visitChildren(self)




    def parameter_declaration(self):

        localctx = openscenario2Parser.Parameter_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_parameter_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.field_name()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__4:
                self.state = 814
                self.match(openscenario2Parser.T__4)
                self.state = 815
                self.field_name()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 821
            self.match(openscenario2Parser.T__22)
            self.state = 822
            self.type_declarator()
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__34:
                self.state = 823
                self.match(openscenario2Parser.T__34)
                self.state = 824
                self.default_value()


            self.state = 829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__55]:
                self.state = 827
                self.parameter_with_declaration()
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 828
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Variable_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Field_nameContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,i)


        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def default_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Default_valueContext,0)


        def sample_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Sample_expressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_variable_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable_declaration" ):
                listener.enterVariable_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable_declaration" ):
                listener.exitVariable_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable_declaration" ):
                return visitor.visitVariable_declaration(self)
            else:
                return visitor.visitChildren(self)




    def variable_declaration(self):

        localctx = openscenario2Parser.Variable_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_variable_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(openscenario2Parser.T__53)
            self.state = 832
            self.field_name()
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__4:
                self.state = 833
                self.match(openscenario2Parser.T__4)
                self.state = 834
                self.field_name()
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 840
            self.match(openscenario2Parser.T__22)
            self.state = 841
            self.type_declarator()
            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__34:
                self.state = 842
                self.match(openscenario2Parser.T__34)
                self.state = 845
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__81, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                    self.state = 843
                    self.default_value()
                    pass
                elif token in [openscenario2Parser.T__54]:
                    self.state = 844
                    self.sample_expression()
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 849
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sample_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def default_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Default_valueContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_sample_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSample_expression" ):
                listener.enterSample_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSample_expression" ):
                listener.exitSample_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample_expression" ):
                return visitor.visitSample_expression(self)
            else:
                return visitor.visitChildren(self)




    def sample_expression(self):

        localctx = openscenario2Parser.Sample_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_sample_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(openscenario2Parser.T__54)
            self.state = 852
            self.match(openscenario2Parser.T__20)
            self.state = 853
            self.expression()
            self.state = 854
            self.match(openscenario2Parser.T__4)
            self.state = 855
            self.event_specification()
            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__4:
                self.state = 856
                self.match(openscenario2Parser.T__4)
                self.state = 857
                self.default_value()


            self.state = 860
            self.match(openscenario2Parser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value" ):
                return visitor.visitDefault_value(self)
            else:
                return visitor.visitChildren(self)




    def default_value(self):

        localctx = openscenario2Parser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_with_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def parameter_with_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Parameter_with_memberContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Parameter_with_memberContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_parameter_with_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_with_declaration" ):
                listener.enterParameter_with_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_with_declaration" ):
                listener.exitParameter_with_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_with_declaration" ):
                return visitor.visitParameter_with_declaration(self)
            else:
                return visitor.visitChildren(self)




    def parameter_with_declaration(self):

        localctx = openscenario2Parser.Parameter_with_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_parameter_with_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(openscenario2Parser.T__55)
            self.state = 865
            self.match(openscenario2Parser.T__22)
            self.state = 866
            self.match(openscenario2Parser.INDENT)
            self.state = 868 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 867
                self.parameter_with_member()
                self.state = 870 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==openscenario2Parser.T__56 or _la==openscenario2Parser.T__59):
                    break

            self.state = 872
            self.match(openscenario2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_with_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_parameter_with_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_with_member" ):
                listener.enterParameter_with_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_with_member" ):
                listener.exitParameter_with_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_with_member" ):
                return visitor.visitParameter_with_member(self)
            else:
                return visitor.visitChildren(self)




    def parameter_with_member(self):

        localctx = openscenario2Parser.Parameter_with_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_parameter_with_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.constraint_declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keep_constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Keep_constraint_declarationContext,0)


        def remove_default_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Remove_default_declarationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_constraint_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_declaration" ):
                listener.enterConstraint_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_declaration" ):
                listener.exitConstraint_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_declaration" ):
                return visitor.visitConstraint_declaration(self)
            else:
                return visitor.visitChildren(self)




    def constraint_declaration(self):

        localctx = openscenario2Parser.Constraint_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_constraint_declaration)
        try:
            self.state = 878
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 876
                self.keep_constraint_declaration()
                pass
            elif token in [openscenario2Parser.T__59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 877
                self.remove_default_declaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Keep_constraint_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_expressionContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def constraint_qualifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_qualifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_keep_constraint_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeep_constraint_declaration" ):
                listener.enterKeep_constraint_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeep_constraint_declaration" ):
                listener.exitKeep_constraint_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeep_constraint_declaration" ):
                return visitor.visitKeep_constraint_declaration(self)
            else:
                return visitor.visitChildren(self)




    def keep_constraint_declaration(self):

        localctx = openscenario2Parser.Keep_constraint_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_keep_constraint_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(openscenario2Parser.T__56)
            self.state = 881
            self.match(openscenario2Parser.T__20)
            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__57 or _la==openscenario2Parser.T__58:
                self.state = 882
                self.constraint_qualifier()


            self.state = 885
            self.constraint_expression()
            self.state = 886
            self.match(openscenario2Parser.T__21)
            self.state = 887
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_constraint_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_qualifier" ):
                listener.enterConstraint_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_qualifier" ):
                listener.exitConstraint_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_qualifier" ):
                return visitor.visitConstraint_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def constraint_qualifier(self):

        localctx = openscenario2Parser.Constraint_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_constraint_qualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            _la = self._input.LA(1)
            if not(_la==openscenario2Parser.T__57 or _la==openscenario2Parser.T__58):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Constraint_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_constraint_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraint_expression" ):
                listener.enterConstraint_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraint_expression" ):
                listener.exitConstraint_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraint_expression" ):
                return visitor.visitConstraint_expression(self)
            else:
                return visitor.visitChildren(self)




    def constraint_expression(self):

        localctx = openscenario2Parser.Constraint_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_constraint_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remove_default_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Parameter_referenceContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_remove_default_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove_default_declaration" ):
                listener.enterRemove_default_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove_default_declaration" ):
                listener.exitRemove_default_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRemove_default_declaration" ):
                return visitor.visitRemove_default_declaration(self)
            else:
                return visitor.visitChildren(self)




    def remove_default_declaration(self):

        localctx = openscenario2Parser.Remove_default_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_remove_default_declaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(openscenario2Parser.T__59)
            self.state = 894
            self.match(openscenario2Parser.T__20)
            self.state = 895
            self.parameter_reference()
            self.state = 896
            self.match(openscenario2Parser.T__21)
            self.state = 897
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Parameter_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def field_access(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_accessContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_parameter_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_reference" ):
                listener.enterParameter_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_reference" ):
                listener.exitParameter_reference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter_reference" ):
                return visitor.visitParameter_reference(self)
            else:
                return visitor.visitChildren(self)




    def parameter_reference(self):

        localctx = openscenario2Parser.Parameter_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_parameter_reference)
        try:
            self.state = 901
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 899
                self.field_name()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 900
                self.field_access()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_nameContext,0)


        def method_implementation(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_implementationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def argument_list_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_list_specificationContext,0)


        def return_type(self):
            return self.getTypedRuleContext(openscenario2Parser.Return_typeContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_declaration" ):
                listener.enterMethod_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_declaration" ):
                listener.exitMethod_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_declaration" ):
                return visitor.visitMethod_declaration(self)
            else:
                return visitor.visitChildren(self)




    def method_declaration(self):

        localctx = openscenario2Parser.Method_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_method_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(openscenario2Parser.T__60)
            self.state = 904
            self.method_name()
            self.state = 905
            self.match(openscenario2Parser.T__20)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)))) != 0):
                self.state = 906
                self.argument_list_specification()


            self.state = 909
            self.match(openscenario2Parser.T__21)
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__61:
                self.state = 910
                self.match(openscenario2Parser.T__61)
                self.state = 911
                self.return_type()


            self.state = 914
            self.method_implementation()
            self.state = 915
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Return_typeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_return_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_type" ):
                listener.enterReturn_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_type" ):
                listener.exitReturn_type(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_type" ):
                return visitor.visitReturn_type(self)
            else:
                return visitor.visitChildren(self)




    def return_type(self):

        localctx = openscenario2Parser.Return_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_return_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            self.type_declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_implementationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def structured_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Structured_identifierContext,0)


        def method_qualifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_qualifierContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_implementation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_implementation" ):
                listener.enterMethod_implementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_implementation" ):
                listener.exitMethod_implementation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_implementation" ):
                return visitor.visitMethod_implementation(self)
            else:
                return visitor.visitChildren(self)




    def method_implementation(self):

        localctx = openscenario2Parser.Method_implementationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_method_implementation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(openscenario2Parser.T__17)
            self.state = 921
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__65:
                self.state = 920
                self.method_qualifier()


            self.state = 934
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__62]:
                self.state = 923
                self.match(openscenario2Parser.T__62)
                self.state = 924
                self.expression()
                pass
            elif token in [openscenario2Parser.T__63]:
                self.state = 925
                self.match(openscenario2Parser.T__63)
                pass
            elif token in [openscenario2Parser.T__64]:
                self.state = 926
                self.match(openscenario2Parser.T__64)
                self.state = 927
                self.structured_identifier()
                self.state = 928
                self.match(openscenario2Parser.T__20)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0):
                    self.state = 929
                    self.argument_list()


                self.state = 932
                self.match(openscenario2Parser.T__21)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_qualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_qualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_qualifier" ):
                listener.enterMethod_qualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_qualifier" ):
                listener.exitMethod_qualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_qualifier" ):
                return visitor.visitMethod_qualifier(self)
            else:
                return visitor.visitChildren(self)




    def method_qualifier(self):

        localctx = openscenario2Parser.Method_qualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_method_qualifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(openscenario2Parser.T__65)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_name" ):
                listener.enterMethod_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_name" ):
                listener.exitMethod_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_name" ):
                return visitor.visitMethod_name(self)
            else:
                return visitor.visitChildren(self)




    def method_name(self):

        localctx = openscenario2Parser.Method_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_method_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Coverage_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_coverage_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoverage_declaration" ):
                listener.enterCoverage_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoverage_declaration" ):
                listener.exitCoverage_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCoverage_declaration" ):
                return visitor.visitCoverage_declaration(self)
            else:
                return visitor.visitChildren(self)




    def coverage_declaration(self):

        localctx = openscenario2Parser.Coverage_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_coverage_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            _la = self._input.LA(1)
            if not(_la==openscenario2Parser.T__66 or _la==openscenario2Parser.T__67):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 941
            self.match(openscenario2Parser.T__20)
            self.state = 942
            self.argument_list()
            self.state = 943
            self.match(openscenario2Parser.T__21)
            self.state = 944
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Modifier_applicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def modifier_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def actor_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_expressionContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_modifier_application

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier_application" ):
                listener.enterModifier_application(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier_application" ):
                listener.exitModifier_application(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier_application" ):
                return visitor.visitModifier_application(self)
            else:
                return visitor.visitChildren(self)




    def modifier_application(self):

        localctx = openscenario2Parser.Modifier_applicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_modifier_application)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 946
                self.actor_expression()
                self.state = 947
                self.match(openscenario2Parser.T__1)


            self.state = 951
            self.modifier_name()
            self.state = 952
            self.match(openscenario2Parser.T__20)
            self.state = 954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0):
                self.state = 953
                self.argument_list()


            self.state = 956
            self.match(openscenario2Parser.T__21)
            self.state = 957
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def on_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.On_directiveContext,0)


        def do_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Do_directiveContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_specification" ):
                listener.enterBehavior_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_specification" ):
                listener.exitBehavior_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_specification" ):
                return visitor.visitBehavior_specification(self)
            else:
                return visitor.visitChildren(self)




    def behavior_specification(self):

        localctx = openscenario2Parser.Behavior_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_behavior_specification)
        try:
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 959
                self.on_directive()
                pass
            elif token in [openscenario2Parser.T__69]:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.do_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def on_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.On_memberContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.On_memberContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_on_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_directive" ):
                listener.enterOn_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_directive" ):
                listener.exitOn_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_directive" ):
                return visitor.visitOn_directive(self)
            else:
                return visitor.visitChildren(self)




    def on_directive(self):

        localctx = openscenario2Parser.On_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_on_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(openscenario2Parser.T__68)
            self.state = 964
            self.event_specification()
            self.state = 965
            self.match(openscenario2Parser.T__22)
            self.state = 966
            self.match(openscenario2Parser.INDENT)
            self.state = 968 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 967
                self.on_member()
                self.state = 970 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==openscenario2Parser.T__74 or _la==openscenario2Parser.T__75):
                    break

            self.state = 972
            self.match(openscenario2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class On_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def call_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Call_directiveContext,0)


        def emit_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Emit_directiveContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_on_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOn_member" ):
                listener.enterOn_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOn_member" ):
                listener.exitOn_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOn_member" ):
                return visitor.visitOn_member(self)
            else:
                return visitor.visitChildren(self)




    def on_member(self):

        localctx = openscenario2Parser.On_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_on_member)
        try:
            self.state = 976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.call_directive()
                pass
            elif token in [openscenario2Parser.T__74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.emit_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def do_member(self):
            return self.getTypedRuleContext(openscenario2Parser.Do_memberContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_do_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_directive" ):
                listener.enterDo_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_directive" ):
                listener.exitDo_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_directive" ):
                return visitor.visitDo_directive(self)
            else:
                return visitor.visitChildren(self)




    def do_directive(self):

        localctx = openscenario2Parser.Do_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_do_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(openscenario2Parser.T__69)
            self.state = 979
            self.do_member()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Do_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def composition(self):
            return self.getTypedRuleContext(openscenario2Parser.CompositionContext,0)


        def behavior_invocation(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_invocationContext,0)


        def wait_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Wait_directiveContext,0)


        def emit_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Emit_directiveContext,0)


        def call_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Call_directiveContext,0)


        def label_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Label_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_do_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDo_member" ):
                listener.enterDo_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDo_member" ):
                listener.exitDo_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDo_member" ):
                return visitor.visitDo_member(self)
            else:
                return visitor.visitChildren(self)




    def do_member(self):

        localctx = openscenario2Parser.Do_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_do_member)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 981
                self.label_name()
                self.state = 982
                self.match(openscenario2Parser.T__22)


            self.state = 991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__70, openscenario2Parser.T__71, openscenario2Parser.T__72]:
                self.state = 986
                self.composition()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__81, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                self.state = 987
                self.behavior_invocation()
                pass
            elif token in [openscenario2Parser.T__73]:
                self.state = 988
                self.wait_directive()
                pass
            elif token in [openscenario2Parser.T__74]:
                self.state = 989
                self.emit_directive()
                pass
            elif token in [openscenario2Parser.T__75]:
                self.state = 990
                self.call_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Label_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_label_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel_name" ):
                listener.enterLabel_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel_name" ):
                listener.exitLabel_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabel_name" ):
                return visitor.visitLabel_name(self)
            else:
                return visitor.visitChildren(self)




    def label_name(self):

        localctx = openscenario2Parser.Label_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_label_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompositionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def composition_operator(self):
            return self.getTypedRuleContext(openscenario2Parser.Composition_operatorContext,0)


        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def do_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Do_memberContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Do_memberContext,i)


        def behavior_with_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_with_declarationContext,0)


        def unqualified_argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Unqualified_argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_composition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposition" ):
                listener.enterComposition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposition" ):
                listener.exitComposition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposition" ):
                return visitor.visitComposition(self)
            else:
                return visitor.visitChildren(self)




    def composition(self):

        localctx = openscenario2Parser.CompositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_composition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.composition_operator()
            self.state = 1001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__20:
                self.state = 996
                self.match(openscenario2Parser.T__20)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0):
                    self.state = 997
                    self.unqualified_argument_list()


                self.state = 1000
                self.match(openscenario2Parser.T__21)


            self.state = 1003
            self.match(openscenario2Parser.T__22)
            self.state = 1004
            self.match(openscenario2Parser.INDENT)
            self.state = 1006 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1005
                self.do_member()
                self.state = 1008 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__70 - 64)) | (1 << (openscenario2Parser.T__71 - 64)) | (1 << (openscenario2Parser.T__72 - 64)) | (1 << (openscenario2Parser.T__73 - 64)) | (1 << (openscenario2Parser.T__74 - 64)) | (1 << (openscenario2Parser.T__75 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0)):
                    break

            self.state = 1010
            self.match(openscenario2Parser.DEDENT)
            self.state = 1012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__55:
                self.state = 1011
                self.behavior_with_declaration()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Composition_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_composition_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComposition_operator" ):
                listener.enterComposition_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComposition_operator" ):
                listener.exitComposition_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComposition_operator" ):
                return visitor.visitComposition_operator(self)
            else:
                return visitor.visitChildren(self)




    def composition_operator(self):

        localctx = openscenario2Parser.Composition_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_composition_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (openscenario2Parser.T__70 - 71)) | (1 << (openscenario2Parser.T__71 - 71)) | (1 << (openscenario2Parser.T__72 - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_invocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def behavior_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_nameContext,0)


        def behavior_with_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Behavior_with_declarationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def actor_expression(self):
            return self.getTypedRuleContext(openscenario2Parser.Actor_expressionContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_invocation" ):
                listener.enterBehavior_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_invocation" ):
                listener.exitBehavior_invocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_invocation" ):
                return visitor.visitBehavior_invocation(self)
            else:
                return visitor.visitChildren(self)




    def behavior_invocation(self):

        localctx = openscenario2Parser.Behavior_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_behavior_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 1016
                self.actor_expression()
                self.state = 1017
                self.match(openscenario2Parser.T__1)


            self.state = 1021
            self.behavior_name()
            self.state = 1022
            self.match(openscenario2Parser.T__20)
            self.state = 1024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0):
                self.state = 1023
                self.argument_list()


            self.state = 1026
            self.match(openscenario2Parser.T__21)
            self.state = 1029
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__55]:
                self.state = 1027
                self.behavior_with_declaration()
                pass
            elif token in [openscenario2Parser.NEWLINE]:
                self.state = 1028
                self.match(openscenario2Parser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_with_declarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(openscenario2Parser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(openscenario2Parser.DEDENT, 0)

        def behavior_with_member(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Behavior_with_memberContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Behavior_with_memberContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_with_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_with_declaration" ):
                listener.enterBehavior_with_declaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_with_declaration" ):
                listener.exitBehavior_with_declaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_with_declaration" ):
                return visitor.visitBehavior_with_declaration(self)
            else:
                return visitor.visitChildren(self)




    def behavior_with_declaration(self):

        localctx = openscenario2Parser.Behavior_with_declarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_behavior_with_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(openscenario2Parser.T__55)
            self.state = 1032
            self.match(openscenario2Parser.T__22)
            self.state = 1033
            self.match(openscenario2Parser.INDENT)
            self.state = 1035 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1034
                self.behavior_with_member()
                self.state = 1037 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__56) | (1 << openscenario2Parser.T__59) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__76 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0)):
                    break

            self.state = 1039
            self.match(openscenario2Parser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Behavior_with_memberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constraint_declaration(self):
            return self.getTypedRuleContext(openscenario2Parser.Constraint_declarationContext,0)


        def modifier_application(self):
            return self.getTypedRuleContext(openscenario2Parser.Modifier_applicationContext,0)


        def until_directive(self):
            return self.getTypedRuleContext(openscenario2Parser.Until_directiveContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_behavior_with_member

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBehavior_with_member" ):
                listener.enterBehavior_with_member(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBehavior_with_member" ):
                listener.exitBehavior_with_member(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBehavior_with_member" ):
                return visitor.visitBehavior_with_member(self)
            else:
                return visitor.visitChildren(self)




    def behavior_with_member(self):

        localctx = openscenario2Parser.Behavior_with_memberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_behavior_with_member)
        try:
            self.state = 1044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__56, openscenario2Parser.T__59]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1041
                self.constraint_declaration()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__81, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1042
                self.modifier_application()
                pass
            elif token in [openscenario2Parser.T__76]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1043
                self.until_directive()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Actor_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_actor_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterActor_expression" ):
                listener.enterActor_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitActor_expression" ):
                listener.exitActor_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitActor_expression" ):
                return visitor.visitActor_expression(self)
            else:
                return visitor.visitChildren(self)




    def actor_expression(self):

        localctx = openscenario2Parser.Actor_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_actor_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Wait_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_wait_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWait_directive" ):
                listener.enterWait_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWait_directive" ):
                listener.exitWait_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWait_directive" ):
                return visitor.visitWait_directive(self)
            else:
                return visitor.visitChildren(self)




    def wait_directive(self):

        localctx = openscenario2Parser.Wait_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_wait_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.match(openscenario2Parser.T__73)
            self.state = 1049
            self.event_specification()
            self.state = 1050
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Emit_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_nameContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_emit_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmit_directive" ):
                listener.enterEmit_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmit_directive" ):
                listener.exitEmit_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmit_directive" ):
                return visitor.visitEmit_directive(self)
            else:
                return visitor.visitChildren(self)




    def emit_directive(self):

        localctx = openscenario2Parser.Emit_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_emit_directive)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(openscenario2Parser.T__74)
            self.state = 1053
            self.event_name()
            self.state = 1058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__20:
                self.state = 1054
                self.match(openscenario2Parser.T__20)
                self.state = 1055
                self.argument_list()
                self.state = 1056
                self.match(openscenario2Parser.T__21)


            self.state = 1060
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Call_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def method_invocation(self):
            return self.getTypedRuleContext(openscenario2Parser.Method_invocationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_call_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall_directive" ):
                listener.enterCall_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall_directive" ):
                listener.exitCall_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall_directive" ):
                return visitor.visitCall_directive(self)
            else:
                return visitor.visitChildren(self)




    def call_directive(self):

        localctx = openscenario2Parser.Call_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_call_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(openscenario2Parser.T__75)
            self.state = 1063
            self.method_invocation()
            self.state = 1064
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Method_invocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)


        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_method_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod_invocation" ):
                listener.enterMethod_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod_invocation" ):
                listener.exitMethod_invocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod_invocation" ):
                return visitor.visitMethod_invocation(self)
            else:
                return visitor.visitChildren(self)




    def method_invocation(self):

        localctx = openscenario2Parser.Method_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_method_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            self.postfix_exp(0)
            self.state = 1067
            self.match(openscenario2Parser.T__20)
            self.state = 1069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0):
                self.state = 1068
                self.argument_list()


            self.state = 1071
            self.match(openscenario2Parser.T__21)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Until_directiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def event_specification(self):
            return self.getTypedRuleContext(openscenario2Parser.Event_specificationContext,0)


        def NEWLINE(self):
            return self.getToken(openscenario2Parser.NEWLINE, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_until_directive

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUntil_directive" ):
                listener.enterUntil_directive(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUntil_directive" ):
                listener.exitUntil_directive(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUntil_directive" ):
                return visitor.visitUntil_directive(self)
            else:
                return visitor.visitChildren(self)




    def until_directive(self):

        localctx = openscenario2Parser.Until_directiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_until_directive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(openscenario2Parser.T__76)
            self.state = 1074
            self.event_specification()
            self.state = 1075
            self.match(openscenario2Parser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_list_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_specification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Argument_specificationContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Argument_specificationContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_argument_list_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list_specification" ):
                listener.enterArgument_list_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list_specification" ):
                listener.exitArgument_list_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_list_specification" ):
                return visitor.visitArgument_list_specification(self)
            else:
                return visitor.visitChildren(self)




    def argument_list_specification(self):

        localctx = openscenario2Parser.Argument_list_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_argument_list_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.argument_specification()
            self.state = 1082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__4:
                self.state = 1078
                self.match(openscenario2Parser.T__4)
                self.state = 1079
                self.argument_specification()
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_specificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_nameContext,0)


        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def default_value(self):
            return self.getTypedRuleContext(openscenario2Parser.Default_valueContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_argument_specification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_specification" ):
                listener.enterArgument_specification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_specification" ):
                listener.exitArgument_specification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_specification" ):
                return visitor.visitArgument_specification(self)
            else:
                return visitor.visitChildren(self)




    def argument_specification(self):

        localctx = openscenario2Parser.Argument_specificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_argument_specification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.argument_name()
            self.state = 1086
            self.match(openscenario2Parser.T__22)
            self.state = 1087
            self.type_declarator()
            self.state = 1090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==openscenario2Parser.T__34:
                self.state = 1088
                self.match(openscenario2Parser.T__34)
                self.state = 1089
                self.default_value()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_name" ):
                listener.enterArgument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_name" ):
                listener.exitArgument_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_name" ):
                return visitor.visitArgument_name(self)
            else:
                return visitor.visitChildren(self)




    def argument_name(self):

        localctx = openscenario2Parser.Argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.qualified_identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positional_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Positional_argumentContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Positional_argumentContext,i)


        def named_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Named_argumentContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Named_argumentContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument_list" ):
                listener.enterArgument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument_list" ):
                listener.exitArgument_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument_list" ):
                return visitor.visitArgument_list(self)
            else:
                return visitor.visitChildren(self)




    def argument_list(self):

        localctx = openscenario2Parser.Argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_argument_list)
        self._la = 0 # Token type
        try:
            self.state = 1117
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.positional_argument()
                self.state = 1099
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1095
                        self.match(openscenario2Parser.T__4)
                        self.state = 1096
                        self.positional_argument() 
                    self.state = 1101
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 1106
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openscenario2Parser.T__4:
                    self.state = 1102
                    self.match(openscenario2Parser.T__4)
                    self.state = 1103
                    self.named_argument()
                    self.state = 1108
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.named_argument()
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openscenario2Parser.T__4:
                    self.state = 1110
                    self.match(openscenario2Parser.T__4)
                    self.state = 1111
                    self.named_argument()
                    self.state = 1116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Positional_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_positional_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositional_argument" ):
                listener.enterPositional_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositional_argument" ):
                listener.exitPositional_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_argument" ):
                return visitor.visitPositional_argument(self)
            else:
                return visitor.visitChildren(self)




    def positional_argument(self):

        localctx = openscenario2Parser.Positional_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_positional_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_argument" ):
                listener.enterNamed_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_argument" ):
                listener.exitNamed_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_argument" ):
                return visitor.visitNamed_argument(self)
            else:
                return visitor.visitChildren(self)




    def named_argument(self):

        localctx = openscenario2Parser.Named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.argument_name()
            self.state = 1122
            self.match(openscenario2Parser.T__22)
            self.state = 1123
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unqualified_argument_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def positional_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Positional_argumentContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Positional_argumentContext,i)


        def unqualified_named_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.Unqualified_named_argumentContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.Unqualified_named_argumentContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_unqualified_argument_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_argument_list" ):
                listener.enterUnqualified_argument_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_argument_list" ):
                listener.exitUnqualified_argument_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualified_argument_list" ):
                return visitor.visitUnqualified_argument_list(self)
            else:
                return visitor.visitChildren(self)




    def unqualified_argument_list(self):

        localctx = openscenario2Parser.Unqualified_argument_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_unqualified_argument_list)
        self._la = 0 # Token type
        try:
            self.state = 1148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.positional_argument()
                self.state = 1130
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1126
                        self.match(openscenario2Parser.T__4)
                        self.state = 1127
                        self.positional_argument() 
                    self.state = 1132
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openscenario2Parser.T__4:
                    self.state = 1133
                    self.match(openscenario2Parser.T__4)
                    self.state = 1134
                    self.unqualified_named_argument()
                    self.state = 1139
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1140
                self.unqualified_named_argument()
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==openscenario2Parser.T__4:
                    self.state = 1141
                    self.match(openscenario2Parser.T__4)
                    self.state = 1142
                    self.unqualified_named_argument()
                    self.state = 1147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unqualified_argument_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_unqualified_argument_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_argument_name" ):
                listener.enterUnqualified_argument_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_argument_name" ):
                listener.exitUnqualified_argument_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualified_argument_name" ):
                return visitor.visitUnqualified_argument_name(self)
            else:
                return visitor.visitChildren(self)




    def unqualified_argument_name(self):

        localctx = openscenario2Parser.Unqualified_argument_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_unqualified_argument_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unqualified_named_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualified_argument_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Unqualified_argument_nameContext,0)


        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_unqualified_named_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualified_named_argument" ):
                listener.enterUnqualified_named_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualified_named_argument" ):
                listener.exitUnqualified_named_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualified_named_argument" ):
                return visitor.visitUnqualified_named_argument(self)
            else:
                return visitor.visitChildren(self)




    def unqualified_named_argument(self):

        localctx = openscenario2Parser.Unqualified_named_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_unqualified_named_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.unqualified_argument_name()
            self.state = 1153
            self.match(openscenario2Parser.T__22)
            self.state = 1154
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implication(self):
            return self.getTypedRuleContext(openscenario2Parser.ImplicationContext,0)


        def ternary_op_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Ternary_op_expContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = openscenario2Parser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_expression)
        try:
            self.state = 1158
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.implication()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1157
                self.ternary_op_exp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ternary_op_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def implication(self):
            return self.getTypedRuleContext(openscenario2Parser.ImplicationContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_ternary_op_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernary_op_exp" ):
                listener.enterTernary_op_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernary_op_exp" ):
                listener.exitTernary_op_exp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTernary_op_exp" ):
                return visitor.visitTernary_op_exp(self)
            else:
                return visitor.visitChildren(self)




    def ternary_op_exp(self):

        localctx = openscenario2Parser.Ternary_op_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_ternary_op_exp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.implication()
            self.state = 1161
            self.match(openscenario2Parser.T__77)
            self.state = 1162
            self.expression()
            self.state = 1163
            self.match(openscenario2Parser.T__22)
            self.state = 1164
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ImplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.DisjunctionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_implication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplication" ):
                listener.enterImplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplication" ):
                listener.exitImplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplication" ):
                return visitor.visitImplication(self)
            else:
                return visitor.visitChildren(self)




    def implication(self):

        localctx = openscenario2Parser.ImplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_implication)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.disjunction()
            self.state = 1171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__78:
                self.state = 1167
                self.match(openscenario2Parser.T__78)
                self.state = 1168
                self.disjunction()
                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.ConjunctionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = openscenario2Parser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.conjunction()
            self.state = 1179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__79:
                self.state = 1175
                self.match(openscenario2Parser.T__79)
                self.state = 1176
                self.conjunction()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.InversionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.InversionContext,i)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = openscenario2Parser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.inversion()
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__80:
                self.state = 1183
                self.match(openscenario2Parser.T__80)
                self.state = 1184
                self.inversion()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InversionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self):
            return self.getTypedRuleContext(openscenario2Parser.InversionContext,0)


        def relation(self):
            return self.getTypedRuleContext(openscenario2Parser.RelationContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_inversion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInversion" ):
                listener.enterInversion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInversion" ):
                listener.exitInversion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInversion" ):
                return visitor.visitInversion(self)
            else:
                return visitor.visitChildren(self)




    def inversion(self):

        localctx = openscenario2Parser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_inversion)
        try:
            self.state = 1193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__81]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1190
                self.match(openscenario2Parser.T__81)
                self.state = 1191
                self.inversion()
                pass
            elif token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__89, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1192
                self.relation(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Sum_expContext,0)


        def relation(self):
            return self.getTypedRuleContext(openscenario2Parser.RelationContext,0)


        def relational_op(self):
            return self.getTypedRuleContext(openscenario2Parser.Relational_opContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_relation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelation" ):
                listener.enterRelation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelation" ):
                listener.exitRelation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)



    def relation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openscenario2Parser.RelationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 246
        self.enterRecursionRule(localctx, 246, self.RULE_relation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.sum_exp(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = openscenario2Parser.RelationContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_relation)
                    self.state = 1198
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1199
                    self.relational_op()
                    self.state = 1200
                    self.sum_exp(0) 
                self.state = 1206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Relational_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_relational_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelational_op" ):
                listener.enterRelational_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelational_op" ):
                listener.exitRelational_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelational_op" ):
                return visitor.visitRelational_op(self)
            else:
                return visitor.visitChildren(self)




    def relational_op(self):

        localctx = openscenario2Parser.Relational_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_relational_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            _la = self._input.LA(1)
            if not(((((_la - 39)) & ~0x3f) == 0 and ((1 << (_la - 39)) & ((1 << (openscenario2Parser.T__38 - 39)) | (1 << (openscenario2Parser.T__82 - 39)) | (1 << (openscenario2Parser.T__83 - 39)) | (1 << (openscenario2Parser.T__84 - 39)) | (1 << (openscenario2Parser.T__85 - 39)) | (1 << (openscenario2Parser.T__86 - 39)) | (1 << (openscenario2Parser.T__87 - 39)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sum_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(openscenario2Parser.TermContext,0)


        def sum_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Sum_expContext,0)


        def additive_op(self):
            return self.getTypedRuleContext(openscenario2Parser.Additive_opContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_sum_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSum_exp" ):
                listener.enterSum_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSum_exp" ):
                listener.exitSum_exp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSum_exp" ):
                return visitor.visitSum_exp(self)
            else:
                return visitor.visitChildren(self)



    def sum_exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openscenario2Parser.Sum_expContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 250
        self.enterRecursionRule(localctx, 250, self.RULE_sum_exp, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,119,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = openscenario2Parser.Sum_expContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sum_exp)
                    self.state = 1212
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1213
                    self.additive_op()
                    self.state = 1214
                    self.term(0) 
                self.state = 1220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,119,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Additive_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_additive_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditive_op" ):
                listener.enterAdditive_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditive_op" ):
                listener.exitAdditive_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditive_op" ):
                return visitor.visitAdditive_op(self)
            else:
                return visitor.visitChildren(self)




    def additive_op(self):

        localctx = openscenario2Parser.Additive_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_additive_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            _la = self._input.LA(1)
            if not(_la==openscenario2Parser.T__88 or _la==openscenario2Parser.T__89):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(openscenario2Parser.FactorContext,0)


        def term(self):
            return self.getTypedRuleContext(openscenario2Parser.TermContext,0)


        def multiplicative_op(self):
            return self.getTypedRuleContext(openscenario2Parser.Multiplicative_opContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openscenario2Parser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_term, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1232
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = openscenario2Parser.TermContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                    self.state = 1226
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1227
                    self.multiplicative_op()
                    self.state = 1228
                    self.factor() 
                self.state = 1234
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Multiplicative_opContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_multiplicative_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicative_op" ):
                listener.enterMultiplicative_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicative_op" ):
                listener.exitMultiplicative_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicative_op" ):
                return visitor.visitMultiplicative_op(self)
            else:
                return visitor.visitChildren(self)




    def multiplicative_op(self):

        localctx = openscenario2Parser.Multiplicative_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_multiplicative_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            _la = self._input.LA(1)
            if not(_la==openscenario2Parser.T__8 or _la==openscenario2Parser.T__90 or _la==openscenario2Parser.T__91):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)


        def factor(self):
            return self.getTypedRuleContext(openscenario2Parser.FactorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = openscenario2Parser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_factor)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__0, openscenario2Parser.T__2, openscenario2Parser.T__3, openscenario2Parser.T__5, openscenario2Parser.T__6, openscenario2Parser.T__7, openscenario2Parser.T__16, openscenario2Parser.T__18, openscenario2Parser.T__20, openscenario2Parser.T__23, openscenario2Parser.T__24, openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32, openscenario2Parser.T__33, openscenario2Parser.T__36, openscenario2Parser.T__37, openscenario2Parser.T__39, openscenario2Parser.T__40, openscenario2Parser.T__41, openscenario2Parser.T__42, openscenario2Parser.T__43, openscenario2Parser.T__44, openscenario2Parser.T__45, openscenario2Parser.T__60, openscenario2Parser.T__62, openscenario2Parser.T__63, openscenario2Parser.T__64, openscenario2Parser.T__92, openscenario2Parser.T__93, openscenario2Parser.STRING_LITERAL, openscenario2Parser.BOOL_LITERAL, openscenario2Parser.INTEGER_LITERAL, openscenario2Parser.FLOAT_LITERAL, openscenario2Parser.IDENTIFIER, openscenario2Parser.PHYSICAL_LITERAL, openscenario2Parser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1237
                self.postfix_exp(0)
                pass
            elif token in [openscenario2Parser.T__89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1238
                self.match(openscenario2Parser.T__89)
                self.state = 1239
                self.factor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Postfix_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return openscenario2Parser.RULE_postfix_exp

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class Type_test_exp_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_test_exp_pe" ):
                listener.enterType_test_exp_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_test_exp_pe" ):
                listener.exitType_test_exp_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_test_exp_pe" ):
                return visitor.visitType_test_exp_pe(self)
            else:
                return visitor.visitChildren(self)


    class Cast_exp_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def type_declarator(self):
            return self.getTypedRuleContext(openscenario2Parser.Type_declaratorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_exp_pe" ):
                listener.enterCast_exp_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_exp_pe" ):
                listener.exitCast_exp_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast_exp_pe" ):
                return visitor.visitCast_exp_pe(self)
            else:
                return visitor.visitChildren(self)


    class Primary_exp_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primary_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Primary_expContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_exp_pe" ):
                listener.enterPrimary_exp_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_exp_pe" ):
                listener.exitPrimary_exp_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_exp_pe" ):
                return visitor.visitPrimary_exp_pe(self)
            else:
                return visitor.visitChildren(self)


    class Field_access_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_access_pe" ):
                listener.enterField_access_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_access_pe" ):
                listener.exitField_access_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_access_pe" ):
                return visitor.visitField_access_pe(self)
            else:
                return visitor.visitChildren(self)


    class Element_access_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def OPEN_BRACKET(self):
            return self.getToken(openscenario2Parser.OPEN_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)

        def CLOSE_BRACKET(self):
            return self.getToken(openscenario2Parser.CLOSE_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElement_access_pe" ):
                listener.enterElement_access_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElement_access_pe" ):
                listener.exitElement_access_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElement_access_pe" ):
                return visitor.visitElement_access_pe(self)
            else:
                return visitor.visitChildren(self)


    class Function_application_peContext(Postfix_expContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a openscenario2Parser.Postfix_expContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)

        def argument_list(self):
            return self.getTypedRuleContext(openscenario2Parser.Argument_listContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_application_pe" ):
                listener.enterFunction_application_pe(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_application_pe" ):
                listener.exitFunction_application_pe(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_application_pe" ):
                return visitor.visitFunction_application_pe(self)
            else:
                return visitor.visitChildren(self)



    def postfix_exp(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = openscenario2Parser.Postfix_expContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 260
        self.enterRecursionRule(localctx, 260, self.RULE_postfix_exp, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = openscenario2Parser.Primary_exp_peContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 1243
            self.primary_exp()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1275
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1273
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        localctx = openscenario2Parser.Cast_exp_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1245
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1246
                        self.match(openscenario2Parser.T__1)
                        self.state = 1247
                        self.match(openscenario2Parser.T__48)
                        self.state = 1248
                        self.match(openscenario2Parser.T__20)
                        self.state = 1249
                        self.type_declarator()
                        self.state = 1250
                        self.match(openscenario2Parser.T__21)
                        pass

                    elif la_ == 2:
                        localctx = openscenario2Parser.Type_test_exp_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1252
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1253
                        self.match(openscenario2Parser.T__1)
                        self.state = 1254
                        self.match(openscenario2Parser.T__17)
                        self.state = 1255
                        self.match(openscenario2Parser.T__20)
                        self.state = 1256
                        self.type_declarator()
                        self.state = 1257
                        self.match(openscenario2Parser.T__21)
                        pass

                    elif la_ == 3:
                        localctx = openscenario2Parser.Element_access_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1259
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1260
                        self.match(openscenario2Parser.OPEN_BRACKET)
                        self.state = 1261
                        self.expression()
                        self.state = 1262
                        self.match(openscenario2Parser.CLOSE_BRACKET)
                        pass

                    elif la_ == 4:
                        localctx = openscenario2Parser.Function_application_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1264
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1265
                        self.match(openscenario2Parser.T__20)
                        self.state = 1267
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__7) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__20) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.T__81 - 64)) | (1 << (openscenario2Parser.T__89 - 64)) | (1 << (openscenario2Parser.T__92 - 64)) | (1 << (openscenario2Parser.T__93 - 64)) | (1 << (openscenario2Parser.STRING_LITERAL - 64)) | (1 << (openscenario2Parser.BOOL_LITERAL - 64)) | (1 << (openscenario2Parser.INTEGER_LITERAL - 64)) | (1 << (openscenario2Parser.FLOAT_LITERAL - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)) | (1 << (openscenario2Parser.PHYSICAL_LITERAL - 64)) | (1 << (openscenario2Parser.OPEN_BRACKET - 64)))) != 0):
                            self.state = 1266
                            self.argument_list()


                        self.state = 1269
                        self.match(openscenario2Parser.T__21)
                        pass

                    elif la_ == 5:
                        localctx = openscenario2Parser.Field_access_peContext(self, openscenario2Parser.Postfix_expContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfix_exp)
                        self.state = 1270
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1271
                        self.match(openscenario2Parser.T__1)
                        self.state = 1272
                        self.field_name()
                        pass

             
                self.state = 1277
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Field_accessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfix_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Postfix_expContext,0)


        def field_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Field_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_field_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_access" ):
                listener.enterField_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_access" ):
                listener.exitField_access(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitField_access" ):
                return visitor.visitField_access(self)
            else:
                return visitor.visitChildren(self)




    def field_access(self):

        localctx = openscenario2Parser.Field_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_field_access)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.postfix_exp(0)
            self.state = 1279
            self.match(openscenario2Parser.T__1)
            self.state = 1280
            self.field_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Primary_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def value_exp(self):
            return self.getTypedRuleContext(openscenario2Parser.Value_expContext,0)


        def qualified_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Qualified_identifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_primary_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimary_exp" ):
                listener.enterPrimary_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimary_exp" ):
                listener.exitPrimary_exp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary_exp" ):
                return visitor.visitPrimary_exp(self)
            else:
                return visitor.visitChildren(self)




    def primary_exp(self):

        localctx = openscenario2Parser.Primary_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_primary_exp)
        try:
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1282
                self.value_exp()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1283
                self.match(openscenario2Parser.T__92)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1284
                self.qualified_identifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1285
                self.match(openscenario2Parser.T__20)
                self.state = 1286
                self.expression()
                self.state = 1287
                self.match(openscenario2Parser.T__21)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Value_expContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Integer_literalContext,0)


        def float_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Float_literalContext,0)


        def physical_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Physical_literalContext,0)


        def bool_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.Bool_literalContext,0)


        def string_literal(self):
            return self.getTypedRuleContext(openscenario2Parser.String_literalContext,0)


        def enum_value_reference(self):
            return self.getTypedRuleContext(openscenario2Parser.Enum_value_referenceContext,0)


        def list_constructor(self):
            return self.getTypedRuleContext(openscenario2Parser.List_constructorContext,0)


        def range_constructor(self):
            return self.getTypedRuleContext(openscenario2Parser.Range_constructorContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_value_exp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_exp" ):
                listener.enterValue_exp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_exp" ):
                listener.exitValue_exp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_exp" ):
                return visitor.visitValue_exp(self)
            else:
                return visitor.visitChildren(self)




    def value_exp(self):

        localctx = openscenario2Parser.Value_expContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_value_exp)
        try:
            self.state = 1299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1291
                self.integer_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1292
                self.float_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1293
                self.physical_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1294
                self.bool_literal()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1295
                self.string_literal()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1296
                self.enum_value_reference()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1297
                self.list_constructor()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1298
                self.range_constructor()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class List_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_BRACKET(self):
            return self.getToken(openscenario2Parser.OPEN_BRACKET, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,i)


        def CLOSE_BRACKET(self):
            return self.getToken(openscenario2Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_list_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_constructor" ):
                listener.enterList_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_constructor" ):
                listener.exitList_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_constructor" ):
                return visitor.visitList_constructor(self)
            else:
                return visitor.visitChildren(self)




    def list_constructor(self):

        localctx = openscenario2Parser.List_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_list_constructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.match(openscenario2Parser.OPEN_BRACKET)
            self.state = 1302
            self.expression()
            self.state = 1307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==openscenario2Parser.T__4:
                self.state = 1303
                self.match(openscenario2Parser.T__4)
                self.state = 1304
                self.expression()
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1310
            self.match(openscenario2Parser.CLOSE_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Range_constructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(openscenario2Parser.ExpressionContext)
            else:
                return self.getTypedRuleContext(openscenario2Parser.ExpressionContext,i)


        def OPEN_BRACKET(self):
            return self.getToken(openscenario2Parser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(openscenario2Parser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_range_constructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRange_constructor" ):
                listener.enterRange_constructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRange_constructor" ):
                listener.exitRange_constructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRange_constructor" ):
                return visitor.visitRange_constructor(self)
            else:
                return visitor.visitChildren(self)




    def range_constructor(self):

        localctx = openscenario2Parser.Range_constructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_range_constructor)
        try:
            self.state = 1325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.T__93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1312
                self.match(openscenario2Parser.T__93)
                self.state = 1313
                self.match(openscenario2Parser.T__20)
                self.state = 1314
                self.expression()
                self.state = 1315
                self.match(openscenario2Parser.T__4)
                self.state = 1316
                self.expression()
                self.state = 1317
                self.match(openscenario2Parser.T__21)
                pass
            elif token in [openscenario2Parser.OPEN_BRACKET]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1319
                self.match(openscenario2Parser.OPEN_BRACKET)
                self.state = 1320
                self.expression()
                self.state = 1321
                self.match(openscenario2Parser.T__94)
                self.state = 1322
                self.expression()
                self.state = 1323
                self.match(openscenario2Parser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class String_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(openscenario2Parser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_string_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterString_literal" ):
                listener.enterString_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitString_literal" ):
                listener.exitString_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString_literal" ):
                return visitor.visitString_literal(self)
            else:
                return visitor.visitChildren(self)




    def string_literal(self):

        localctx = openscenario2Parser.String_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_string_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1327
            self.match(openscenario2Parser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Bool_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL_LITERAL(self):
            return self.getToken(openscenario2Parser.BOOL_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_bool_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBool_literal" ):
                listener.enterBool_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBool_literal" ):
                listener.exitBool_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBool_literal" ):
                return visitor.visitBool_literal(self)
            else:
                return visitor.visitChildren(self)




    def bool_literal(self):

        localctx = openscenario2Parser.Bool_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_bool_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(openscenario2Parser.BOOL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Integer_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_LITERAL(self):
            return self.getToken(openscenario2Parser.INTEGER_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger_literal" ):
                return visitor.visitInteger_literal(self)
            else:
                return visitor.visitChildren(self)




    def integer_literal(self):

        localctx = openscenario2Parser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_integer_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.match(openscenario2Parser.INTEGER_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Uint_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UINT_LITERAL(self):
            return self.getToken(openscenario2Parser.UINT_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_uint_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUint_literal" ):
                listener.enterUint_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUint_literal" ):
                listener.exitUint_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUint_literal" ):
                return visitor.visitUint_literal(self)
            else:
                return visitor.visitChildren(self)




    def uint_literal(self):

        localctx = openscenario2Parser.Uint_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_uint_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.match(openscenario2Parser.UINT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Hex_uint_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEX_UINT_LITERAL(self):
            return self.getToken(openscenario2Parser.HEX_UINT_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_hex_uint_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHex_uint_literal" ):
                listener.enterHex_uint_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHex_uint_literal" ):
                listener.exitHex_uint_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHex_uint_literal" ):
                return visitor.visitHex_uint_literal(self)
            else:
                return visitor.visitChildren(self)




    def hex_uint_literal(self):

        localctx = openscenario2Parser.Hex_uint_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_hex_uint_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            self.match(openscenario2Parser.HEX_UINT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Float_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(openscenario2Parser.FLOAT_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_float_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloat_literal" ):
                listener.enterFloat_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloat_literal" ):
                listener.exitFloat_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloat_literal" ):
                return visitor.visitFloat_literal(self)
            else:
                return visitor.visitChildren(self)




    def float_literal(self):

        localctx = openscenario2Parser.Float_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_float_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(openscenario2Parser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(openscenario2Parser.IDENTIFIER, 0)

        def si_base_unit_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_unit_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = openscenario2Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_identifier)
        try:
            self.state = 1364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1339
                self.match(openscenario2Parser.IDENTIFIER)
                pass
            elif token in [openscenario2Parser.T__0]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1340
                self.match(openscenario2Parser.T__0)
                pass
            elif token in [openscenario2Parser.T__2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1341
                self.match(openscenario2Parser.T__2)
                pass
            elif token in [openscenario2Parser.T__3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1342
                self.match(openscenario2Parser.T__3)
                pass
            elif token in [openscenario2Parser.T__5]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1343
                self.match(openscenario2Parser.T__5)
                pass
            elif token in [openscenario2Parser.T__6]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1344
                self.match(openscenario2Parser.T__6)
                pass
            elif token in [openscenario2Parser.T__16]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1345
                self.match(openscenario2Parser.T__16)
                pass
            elif token in [openscenario2Parser.T__18]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1346
                self.match(openscenario2Parser.T__18)
                pass
            elif token in [openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1347
                self.si_base_unit_name()
                pass
            elif token in [openscenario2Parser.T__23]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1348
                self.match(openscenario2Parser.T__23)
                pass
            elif token in [openscenario2Parser.T__24]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1349
                self.match(openscenario2Parser.T__24)
                pass
            elif token in [openscenario2Parser.T__33]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1350
                self.match(openscenario2Parser.T__33)
                pass
            elif token in [openscenario2Parser.T__36]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1351
                self.match(openscenario2Parser.T__36)
                pass
            elif token in [openscenario2Parser.T__39]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1352
                self.match(openscenario2Parser.T__39)
                pass
            elif token in [openscenario2Parser.T__40]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1353
                self.match(openscenario2Parser.T__40)
                pass
            elif token in [openscenario2Parser.T__41]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1354
                self.match(openscenario2Parser.T__41)
                pass
            elif token in [openscenario2Parser.T__42]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1355
                self.match(openscenario2Parser.T__42)
                pass
            elif token in [openscenario2Parser.T__44]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1356
                self.match(openscenario2Parser.T__44)
                pass
            elif token in [openscenario2Parser.T__37]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1357
                self.match(openscenario2Parser.T__37)
                pass
            elif token in [openscenario2Parser.T__43]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1358
                self.match(openscenario2Parser.T__43)
                pass
            elif token in [openscenario2Parser.T__45]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1359
                self.match(openscenario2Parser.T__45)
                pass
            elif token in [openscenario2Parser.T__60]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1360
                self.match(openscenario2Parser.T__60)
                pass
            elif token in [openscenario2Parser.T__63]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1361
                self.match(openscenario2Parser.T__63)
                pass
            elif token in [openscenario2Parser.T__62]:
                self.enterOuterAlt(localctx, 24)
                self.state = 1362
                self.match(openscenario2Parser.T__62)
                pass
            elif token in [openscenario2Parser.T__64]:
                self.enterOuterAlt(localctx, 25)
                self.state = 1363
                self.match(openscenario2Parser.T__64)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Qualified_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def prefixed_identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.Prefixed_identifierContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_qualified_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_identifier" ):
                listener.enterQualified_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_identifier" ):
                listener.exitQualified_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_identifier" ):
                return visitor.visitQualified_identifier(self)
            else:
                return visitor.visitChildren(self)




    def qualified_identifier(self):

        localctx = openscenario2Parser.Qualified_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_qualified_identifier)
        try:
            self.state = 1368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,130,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1366
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.prefixed_identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Prefixed_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(openscenario2Parser.IdentifierContext,0)


        def namespace_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Namespace_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_prefixed_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixed_identifier" ):
                listener.enterPrefixed_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixed_identifier" ):
                listener.exitPrefixed_identifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixed_identifier" ):
                return visitor.visitPrefixed_identifier(self)
            else:
                return visitor.visitChildren(self)




    def prefixed_identifier(self):

        localctx = openscenario2Parser.Prefixed_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_prefixed_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << openscenario2Parser.T__0) | (1 << openscenario2Parser.T__2) | (1 << openscenario2Parser.T__3) | (1 << openscenario2Parser.T__5) | (1 << openscenario2Parser.T__6) | (1 << openscenario2Parser.T__16) | (1 << openscenario2Parser.T__18) | (1 << openscenario2Parser.T__23) | (1 << openscenario2Parser.T__24) | (1 << openscenario2Parser.T__25) | (1 << openscenario2Parser.T__26) | (1 << openscenario2Parser.T__27) | (1 << openscenario2Parser.T__28) | (1 << openscenario2Parser.T__29) | (1 << openscenario2Parser.T__30) | (1 << openscenario2Parser.T__31) | (1 << openscenario2Parser.T__32) | (1 << openscenario2Parser.T__33) | (1 << openscenario2Parser.T__36) | (1 << openscenario2Parser.T__37) | (1 << openscenario2Parser.T__39) | (1 << openscenario2Parser.T__40) | (1 << openscenario2Parser.T__41) | (1 << openscenario2Parser.T__42) | (1 << openscenario2Parser.T__43) | (1 << openscenario2Parser.T__44) | (1 << openscenario2Parser.T__45) | (1 << openscenario2Parser.T__60) | (1 << openscenario2Parser.T__62))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (openscenario2Parser.T__63 - 64)) | (1 << (openscenario2Parser.T__64 - 64)) | (1 << (openscenario2Parser.IDENTIFIER - 64)))) != 0):
                self.state = 1370
                self.namespace_name()


            self.state = 1373
            self.match(openscenario2Parser.T__7)
            self.state = 1374
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Physical_literalContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PHYSICAL_LITERAL(self):
            return self.getToken(openscenario2Parser.PHYSICAL_LITERAL, 0)

        def getRuleIndex(self):
            return openscenario2Parser.RULE_physical_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPhysical_literal" ):
                listener.enterPhysical_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPhysical_literal" ):
                listener.exitPhysical_literal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPhysical_literal" ):
                return visitor.visitPhysical_literal(self)
            else:
                return visitor.visitChildren(self)




    def physical_literal(self):

        localctx = openscenario2Parser.Physical_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_physical_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(openscenario2Parser.PHYSICAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unit_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self, i:int=None):
            if i is None:
                return self.getTokens(openscenario2Parser.IDENTIFIER)
            else:
                return self.getToken(openscenario2Parser.IDENTIFIER, i)

        def si_base_unit_name(self):
            return self.getTypedRuleContext(openscenario2Parser.Si_base_unit_nameContext,0)


        def getRuleIndex(self):
            return openscenario2Parser.RULE_unit_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnit_name" ):
                listener.enterUnit_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnit_name" ):
                listener.exitUnit_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnit_name" ):
                return visitor.visitUnit_name(self)
            else:
                return visitor.visitChildren(self)




    def unit_name(self):

        localctx = openscenario2Parser.Unit_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_unit_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1378
                self.match(openscenario2Parser.IDENTIFIER)
                self.state = 1379
                self.match(openscenario2Parser.T__7)


            self.state = 1384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [openscenario2Parser.IDENTIFIER]:
                self.state = 1382
                self.match(openscenario2Parser.IDENTIFIER)
                pass
            elif token in [openscenario2Parser.T__25, openscenario2Parser.T__26, openscenario2Parser.T__27, openscenario2Parser.T__28, openscenario2Parser.T__29, openscenario2Parser.T__30, openscenario2Parser.T__31, openscenario2Parser.T__32]:
                self.state = 1383
                self.si_base_unit_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[123] = self.relation_sempred
        self._predicates[125] = self.sum_exp_sempred
        self._predicates[127] = self.term_sempred
        self._predicates[130] = self.postfix_exp_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def relation_sempred(self, localctx:RelationContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def sum_exp_sempred(self, localctx:Sum_expContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfix_exp_sempred(self, localctx:Postfix_expContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 1)
         




